from data import TOKEN, db_dbname, db_host, db_user, db_password
from database import Database
import os
from typing import Optional, Tuple
from telegram import (
    Chat,
    ChatMember,
    ChatMemberUpdated,
    Update,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    BotCommandScopeAllGroupChats,
    BotCommandScopeAllPrivateChats,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ChatMemberHandler,
    CallbackQueryHandler,
)
import logging
import pandas as pd


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_type = update.message.chat.type
    msg = update.message.text

    if chat_type == 'private':
        try:
            await context.bot.send_message(ADMIN_GROUP_ID, f'–ú–Ω–µ —Ç—É—Ç {update.effective_user.full_name} —á—Ç–æ-—Ç–æ –Ω–∞–ø–∏—Å–∞–ª, –Ω–µ —É–º–µ—é —á–∏—Ç–∞—Ç—å (')
            await context.bot.forward_message(ADMIN_GROUP_ID, update.effective_user.id, update.message.id)
        except:
            logging.error('–Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞, —Ç–∞–∫ –∫–∞–∫ ADMIN_GROUP_ID == 0; –≤–æ–∑–º–æ–∂–Ω–æ, –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª "admin_group_id.txt"')
    elif chat_type == 'group':
        if DB_ADMIN_STATUS == Status_ENTERING_BUSINESS_DIRECTION:
            if db.business_direction_exists(msg):
                await context.bot.send_message(ADMIN_GROUP_ID, '–¢–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–∏–¥—É–º–∞–π —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ –∏–ª–∏ –Ω–∞–∂–º–∏ "–æ—Ç–º–µ–Ω–∞"')
            else:
                if msg.lower() == "–æ—Ç–º–µ–Ω–∞":
                    await context.bot.send_message(ADMIN_GROUP_ID, '–û—Ç–º–µ–Ω–∞ —Ç–∞–∫ –æ—Ç–º–µ–Ω–∞', reply_markup=ReplyKeyboardRemove())
                else:
                    db.add_business_direction(msg)
                    await context.bot.send_message(ADMIN_GROUP_ID, '–î–æ–±–∞–≤–∏–ª üëå', reply_markup=ReplyKeyboardRemove())
                set_group_status(Status_MAIN)

        elif DB_ADMIN_STATUS == Status_ENTERING_CLIENTS_DATA:
            if msg.lower() == "–æ—Ç–º–µ–Ω–∞":
                await context.bot.send_message(ADMIN_GROUP_ID, "–î–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞", reply_markup=ReplyKeyboardRemove())
                set_group_status(Status_MAIN)
                return
            lines_entered = list(map(lambda x: x.strip(), msg.split('\n')))
            lines_entered = list(filter(lambda x: x != '', lines_entered))
            if len(lines_entered) != 8:
                ending = '–∞' if len(lines_entered) == 1 else '–æ'
                await context.bot.send_message(ADMIN_GROUP_ID, f'–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –û–∂–∏–¥–∞–ª–æ—Å—å 8 —Å—Ç—Ä–æ–∫, –±—ã–ª{ending} –ø–æ–ª—É—á–µ–Ω{ending}: {len(lines_entered)}. –¢–∞–∫ —á—Ç–æ –¥–∞–∂–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–µ –±—É–¥—É —á—Ç–æ —Ç–∞–º üôÑ')
                await context.bot.send_message(ADMIN_GROUP_ID, f'–ü–æ–≤—Ç–æ—Ä—è—é –¥–ª—è —Ç—É–ø—ã—Ö. –ù–∞–¥–æ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n{EXPECTED_CLIENTS_DATA_FORMAT}\n\n–õ–∏–±–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–æ—Ç–º–µ–Ω–∞" –ø–æ–¥ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π')
                return
            surname, name, patronymic, sex, tg_id, inn, phone_number, email = lines_entered
            if sex[0].lower() == '–º':
                sex = 'male'
            elif sex[0].lower() == '–∂':
                sex = 'female'
            else:
                await context.bot.send_message(ADMIN_GROUP_ID, f'–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –£ –ø–æ–ª–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ 2 –∑–Ω–∞—á–µ–Ω–∏—è: "–º" –∏ "–∂". –ñ–¥—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–æ—Ç–º–µ–Ω–∞"')
                return
            if not tg_id.isdigit():
                if tg_id[0] == '-' and tg_id[1:].isdigit():
                    await context.bot.send_message(ADMIN_GROUP_ID, f'–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π id. –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É')
                else:
                    await context.bot.send_message(ADMIN_GROUP_ID, f'–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä. –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É')
                return
            if len(tg_id) > 18:
                await context.bot.send_message(ADMIN_GROUP_ID, f'–ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥–µ —Ä–µ–∞–ª—å–Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–∞–∫–æ–π –¥–ª–∏–Ω–Ω—ã–π id, –ø–µ—Ä–µ–¥–∞–π –º–æ–µ–º—É —Ä–∞–∑—Ä–∞–±—É, —á—Ç–æ –æ–Ω –¥–æ–ª–±–æ–µ–±. –ù–æ —Å–∫–æ—Ä–µ–π –≤—Å–µ–≥–æ —Ç–∞–∫–æ–≥–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å, —Ç–∞–∫ —á—Ç–æ —É—Ç–æ—á–Ω–∏ id –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–∞–∫–æ–≥–æ-–Ω–∏–±—É–¥—å –±–æ—Ç–∞ —Ç–∏–ø–∞ @get_any_telegram_id_bot –∏ –ø–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É)')
                return
            tg_id = int(tg_id)
            if len(inn) > 15:
                await context.bot.send_message(ADMIN_GROUP_ID, f'–î–ª–∏–Ω–∞ –ò–ù–ù –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 15. –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É')
                return
            for char in phone_number:
                if not char.isdigit():
                    phone_number = phone_number.replace(char, '')
            if phone_number == '':
                await context.bot.send_message(ADMIN_GROUP_ID, f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ü–∏—Ñ—Ä, –µ—Å–ª–∏ —Ç—ã –Ω–µ –∑–Ω–∞–ª. –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É')
                return
            if len(phone_number) > 11:
                await context.bot.send_message(ADMIN_GROUP_ID, f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 11 —Ü–∏—Ñ—Ä. –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É')
                return
            if phone_number[0] == '7':
                phone_number = '8' + phone_number[1:]
            business_direction_id = db.get_business_direction_id(CALLBACK_DATA['chosen_direction'])
            surname = surname.capitalize()
            name = name.capitalize()
            patronymic = patronymic.capitalize()
            inn = inn.strip()
            email = email.lower()
            assert len(surname) <= 30 and len(name) <= 30 and len(patronymic) <= 30 and len(email) <= 50
            if db.add_client(surname, name, patronymic, sex, tg_id, inn, business_direction_id, phone_number, email):
                await context.bot.send_message(ADMIN_GROUP_ID, f'–î–æ–±–∞–≤–∏–ª –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑—É {"üßë" if sex == "male" else "üë©"}', reply_markup=ReplyKeyboardRemove())
                set_group_status(Status_MAIN)
                try:
                    await context.bot.send_message(tg_id, "–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥! –£ –º–µ–Ω—è —Ö–æ—Ä–æ—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏: —Ç–µ–±—è —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏ –≤ –±–∞–∑—É –∏ —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –æ–±–µ—â–∞–Ω–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É!")
                except:
                    pass
            else:
                reply_msg = f'‚ùå –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å. –í –±–∞–∑–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∫–ª–∏–µ–Ω—Ç –ª–∏–±–æ —Å —Ç–∞–∫–∏–º –∂–µ id, –ª–∏–±–æ —Å —Ç–∞–∫–∏–º –∂–µ –ò–ù–ù, –ª–∏–±–æ —Å —Ç–∞–∫–∏–º –∂–µ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ª–∏–±–æ —Å —Ç–∞–∫–æ–π –∂–µ –ø–æ—á—Ç–æ–π'
                await context.bot.send_message(ADMIN_GROUP_ID, reply_msg, reply_markup=ReplyKeyboardRemove())

    else:
        logging.warning(f'—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞: {chat_type}')

    print(f'User ({update.message.chat.id}) in {chat_type}: "{msg}"')


async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global CALLBACK_DATA
    assert len(CALLBACK_DATA) != 0
    query = update.callback_query

    if DB_ADMIN_STATUS == Status_PRESSING_BUSINESS_DIRECTION_TO_DELETE_ONE:
        if query.data == "–æ—Ç–º–µ–Ω–∞":
            await context.bot.send_message(ADMIN_GROUP_ID, "–ö–∞–∫ —Å–∫–∞–∂–µ—à—å")
        else:
            chosen_direction = CALLBACK_DATA[query.data]
            result = db.delete_business_direction(chosen_direction)
            if result is True:
                await context.bot.send_message(ADMIN_GROUP_ID, f'–£–¥–∞–ª–∏–ª –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ "{chosen_direction}" üëç')
            else:
                await context.bot.send_message(ADMIN_GROUP_ID, f'–ù–µ –º–æ–≥—É —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞ "{chosen_direction}", —Ç–∞–∫ –∫–∞–∫ –≤ –Ω–µ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫ üòê')
        set_group_status(Status_MAIN)

    elif DB_ADMIN_STATUS == Status_PRESSING_BUSINESS_DIRECTION_TO_ADD_NEW_CLIENT:
        if query.data == "–æ—Ç–º–µ–Ω–∞":
            await context.bot.send_message(ADMIN_GROUP_ID, "–î–∞ –ª–µ–≥–∫–æ")
            set_group_status(Status_MAIN)
        else:
            set_group_status(Status_ENTERING_CLIENTS_DATA)
            CALLBACK_DATA['chosen_direction'] = CALLBACK_DATA[query.data]
            reply_msg = f'–ë—ã–ª–æ –≤—ã–±—Ä–∞–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ "{CALLBACK_DATA[query.data]}". –í–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ (–∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–æ—Ç–º–µ–Ω–∞"):\n\n{EXPECTED_CLIENTS_DATA_FORMAT}'
            await context.bot.send_message(ADMIN_GROUP_ID, reply_msg, reply_markup=ReplyKeyboardMarkup(CANCEL_BUTTON))

    elif DB_ADMIN_STATUS == Status_PRESSING_BUSINESS_DIRECTION_TO_SEND_FILE:
        if query.data == "–æ—Ç–º–µ–Ω–∞":
            os.remove(CURRENT_FILE)
            await context.bot.send_message(ADMIN_GROUP_ID, "–û–∫")
            set_group_status(Status_MAIN)
        else:
            set_group_status(Status_PRESSING_CLIENT_TO_SEND_FILE)
            buttons = []
            clients = db.get_clients_from_business_direction(CALLBACK_DATA[query.data])
            CALLBACK_DATA.clear()
            for i in range(len(clients)):
                name, surname, tg_id, phone_number = clients[i]
                buttons.append([InlineKeyboardButton(f'{name} {surname}, {prettify_phone_number(phone_number)}', callback_data=f'{tg_id}')])
                CALLBACK_DATA[f'{tg_id}'] = f'{name} {surname}'
            buttons.append([InlineKeyboardButton("–ù–∏–∫–æ–º—É, –∑–∞–±–µ–π", callback_data="–æ—Ç–º–µ–Ω–∞")])
            await context.bot.send_message(ADMIN_GROUP_ID, '–ö–æ–º—É –∏–∑ –Ω–∏—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?', reply_markup=InlineKeyboardMarkup(buttons))

    elif DB_ADMIN_STATUS == Status_PRESSING_CLIENT_TO_SEND_FILE:
        if query.data == "–æ—Ç–º–µ–Ω–∞":
            await context.bot.send_message(ADMIN_GROUP_ID, "–ù—É –æ–∫")
        else:
            assert CURRENT_FILE != ''
            try:
                sent_message = await context.bot.send_document(query.data, CURRENT_FILE)
                db.write_sent_message_info(int(query.data), sent_message.message_id)
                await context.bot.send_message(ADMIN_GROUP_ID, f'–°–∫–∏–Ω—É–ª —Ñ–∞–π–ª –∫–ª–∏–µ–Ω—Ç—É –ø–æ –∏–º–µ–Ω–∏ {CALLBACK_DATA[query.data]} ‚úÖ')
            except:
                await context.bot.send_message(ADMIN_GROUP_ID, f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∏–Ω—É—Ç—å —Ñ–∞–π–ª —á–µ–ª–æ–≤–µ–∫—É –ø–æ –∏–º–µ–Ω–∏ {CALLBACK_DATA[query.data]}')
        os.remove(CURRENT_FILE)
        set_group_status(Status_MAIN)

    elif DB_ADMIN_STATUS == Status_PRESSING_BUSINESS_DIRECTION_TO_DELETE_CLIENT:
        if query.data == "–æ—Ç–º–µ–Ω–∞":
            await context.bot.send_message(ADMIN_GROUP_ID, "–õ–∞–¥–Ω–æ, –∫–∞–∫ —Å–∫–∞–∂–µ—à—å üòâ")
            set_group_status(Status_MAIN)
        else:
            set_group_status(Status_PRESSING_CLIENT_TO_DELETE_ONE)
            buttons = []
            clients = db.get_clients_from_business_direction(CALLBACK_DATA[query.data])
            CALLBACK_DATA.clear()
            for i in range(len(clients)):
                name, surname, tg_id, phone_number = clients[i]
                buttons.append([InlineKeyboardButton(f'{name} {surname}, {prettify_phone_number(phone_number)}', callback_data=f'{tg_id}')])
                CALLBACK_DATA[f'{tg_id}'] = f'{name} {surname}'
            buttons.append([InlineKeyboardButton("–ù–∏–∫–æ–≥–æ –Ω–µ –Ω–∞–¥–æ, –∑–∞–±–µ–π", callback_data="–æ—Ç–º–µ–Ω–∞")])
            await context.bot.send_message(ADMIN_GROUP_ID, '–ö–æ–≥–æ –∏–∑ –Ω–∏—Ö —É–¥–∞–ª–∏—Ç—å –∏–∑ –±–∞–∑—ã?', reply_markup=InlineKeyboardMarkup(buttons))

    elif DB_ADMIN_STATUS == Status_PRESSING_CLIENT_TO_DELETE_ONE:
        if query.data == "–æ—Ç–º–µ–Ω–∞":
            await context.bot.send_message(ADMIN_GROUP_ID, "–•–æ—Ä–æ—à–æ üòâ")
        else:
            db.delete_client(int(query.data))
            await context.bot.send_message(ADMIN_GROUP_ID, f'–£–¥–∞–ª–∏–ª –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ {CALLBACK_DATA[query.data]} ‚úÖ')
        set_group_status(Status_MAIN)

    elif DB_ADMIN_STATUS == Status_PRESSING_CLIENT_TO_DELETE_LAST_MESSAGE:
        if query.data == "–æ—Ç–º–µ–Ω–∞":
            await context.bot.send_message(ADMIN_GROUP_ID, "–ù–µ –Ω–∞–¥–æ —Ç–∞–∫ –Ω–µ –Ω–∞–¥–æ üòâ")
        else:
            client_full_name = CALLBACK_DATA[query.data]
            chat_id, message_id = list(map(int, query.data.split(',')))
            try:
                await context.bot.delete_message(chat_id, message_id)
                db.delete_sent_message_info(chat_id, message_id)
                await context.bot.send_message(ADMIN_GROUP_ID, f'–£–¥–∞–ª–∏–ª –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –ø–æ –∏–º–µ–Ω–∏ {client_full_name} ‚úÖ')
            except:
                await context.bot.send_message(ADMIN_GROUP_ID, f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –ø–æ –∏–º–µ–Ω–∏ {client_full_name}')
        set_group_status(Status_MAIN)


def prettify_phone_number(phone_number: str) -> str:
    assert len(phone_number) >= 9
    phone_number = phone_number[:1] + ' (' + phone_number[1:4] + ') ' + phone_number[4:7] + '-' + phone_number[7:9] + '-' + phone_number[9:]
    return phone_number


async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type == 'private':
        return
    if DB_ADMIN_STATUS != Status_MAIN:
        await context.bot.send_message(ADMIN_GROUP_ID, '–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫')
        return

    business_directions = db.get_business_directions('non-empty')
    if business_directions is None:
        await context.bot.send_message(ADMIN_GROUP_ID, '–ù–µ–∫–æ–º—É —Å–ª–∞—Ç—å —Ñ–∞–π–ª, –≤ –±–∞–∑–µ –ø–æ–∫–∞ —á—Ç–æ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç')
        return
    global CURRENT_FILE
    file_id = update.message.document.file_id
    CURRENT_FILE = f'File/{update.message.document.file_name}'
    tgFileInstance = await context.bot.get_file(file_id)
    await tgFileInstance.download_to_drive(CURRENT_FILE)

    set_group_status(Status_PRESSING_BUSINESS_DIRECTION_TO_SEND_FILE)
    global CALLBACK_DATA
    CALLBACK_DATA.clear()
    buttons = []
    for i in range(len(business_directions)):
        buttons.append([InlineKeyboardButton(business_directions[i], callback_data=f"btn_{i}")])
        CALLBACK_DATA[f"btn_{i}"] = business_directions[i]
    buttons.append([InlineKeyboardButton("–ù–∏–∫–æ–º—É, –∑–∞–±–µ–π", callback_data="–æ—Ç–º–µ–Ω–∞")])
    await context.bot.send_message(ADMIN_GROUP_ID, '–ö–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª? –í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞', reply_markup=InlineKeyboardMarkup(buttons))


async def command_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type == 'private':  # –µ—Å–ª–∏ –Ω–∞–ø–∏—Å–∞–ª –ø—Ä–æ—Å—Ç–æ–π —Å–º–µ—Ä—Ç–Ω—ã–π
        tg_id = update.effective_chat.id
        if db.client_exists(tg_id):
            await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞)')
            client_info = db.get_clients_data(update.effective_user.id)
            if client_info:
                surname, name, patronymic, sex, tg_id, inn, bd_name, phone_number, email = client_info
                msg = f'–•–æ—Ä–æ—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏! –ù–∞—à –∫–ª–∏–µ–Ω—Ç, {name} {surname} [{prettify_phone_number(phone_number)}], —Ç–æ–ª—å–∫–æ —á—Ç–æ –Ω–∞–ø–∏—Å–∞–ª –º–Ω–µ –∏ —Ç–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–º—É —Ñ–∞–π–ª—ã üòÉ'
                await context.bot.send_message(ADMIN_GROUP_ID, msg)
        else:
            await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –ï—Å–ª–∏ —Ç—ã –æ—Ñ–æ—Ä–º–∏–ª –ø–æ–¥–ø–∏—Å–∫—É, —Ç–æ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –≤ –±–∞–∑—É. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤—è—Ç, —è —Å—Ä–∞–∑—É —Å–æ–æ–±—â—É!')


async def command_add_client(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type == 'private':
        return
    if DB_ADMIN_STATUS != Status_MAIN:
        await context.bot.send_message(ADMIN_GROUP_ID, '–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫')
        return

    business_directions = db.get_business_directions('all')
    if business_directions is None:
        await context.bot.send_message(ADMIN_GROUP_ID, '–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ –∫–æ–≥–¥–∞ –Ω–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –±–∏–∑–Ω–µ—Å–∞')
        return
    set_group_status(Status_PRESSING_BUSINESS_DIRECTION_TO_ADD_NEW_CLIENT)
    global CALLBACK_DATA
    CALLBACK_DATA.clear()
    buttons = []
    for i in range(len(business_directions)):
        buttons.append([InlineKeyboardButton(business_directions[i], callback_data=f"btn_{i}")])
        CALLBACK_DATA[f"btn_{i}"] = business_directions[i]
    buttons.append([InlineKeyboardButton("–æ—Ç–º–µ–Ω–∞", callback_data="–æ—Ç–º–µ–Ω–∞")])
    await context.bot.send_message(ADMIN_GROUP_ID, '–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞, –≤ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏ "–æ—Ç–º–µ–Ω–∞"',
                                   reply_markup=InlineKeyboardMarkup(buttons))


async def command_delete_client(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type == 'private':
        return
    if DB_ADMIN_STATUS != Status_MAIN:
        await context.bot.send_message(ADMIN_GROUP_ID, '–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫')
        return

    if not db.clients_exist():
        await context.bot.send_message(ADMIN_GROUP_ID, "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞")
        return
    business_directions = db.get_business_directions('non-empty')
    assert len(business_directions) <= 100
    set_group_status(Status_PRESSING_BUSINESS_DIRECTION_TO_DELETE_CLIENT)
    global CALLBACK_DATA
    CALLBACK_DATA.clear()
    buttons = []
    for i in range(len(business_directions)):
        buttons.append([InlineKeyboardButton(business_directions[i], callback_data=f"btn_{i}")])
        CALLBACK_DATA[f"btn_{i}"] = business_directions[i]
    buttons.append([InlineKeyboardButton("–æ—Ç–º–µ–Ω–∞", callback_data="–æ—Ç–º–µ–Ω–∞")])
    await context.bot.send_message(ADMIN_GROUP_ID, '–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫–ª–∏–µ–Ω—Ç, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –Ω–∞–∂–º–∏ "–æ—Ç–º–µ–Ω–∞"',
                                   reply_markup=InlineKeyboardMarkup(buttons))


async def command_get_clients_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type == 'private':
        return
    if DB_ADMIN_STATUS != Status_MAIN:
        await context.bot.send_message(ADMIN_GROUP_ID, '–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫')
        return

    clients_data = db.get_clients_data()
    if clients_data is None:
        await context.bot.send_message(ADMIN_GROUP_ID, "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞")
        return
    df = pd.DataFrame(clients_data, columns=['–§–∞–º–∏–ª–∏—è', '–ò–º—è', '–û—Ç—á–µ—Å—Ç–≤–æ', '–ü–æ–ª', '–¢–µ–ª–µ–≥—Ä–∞–º id', '–ò–ù–ù', '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞', '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', '–ü–æ—á—Ç–∞'])
    file_path = f'File/clients_data.xlsx'
    df.to_excel(file_path, sheet_name='–ö–ª–∏–µ–Ω—Ç—ã', index=False)
    await context.bot.send_document(ADMIN_GROUP_ID, file_path)
    os.remove(file_path)


async def command_add_business_direction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type == 'private':
        return
    if DB_ADMIN_STATUS != Status_MAIN:
        await context.bot.send_message(ADMIN_GROUP_ID, '–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫')
        return

    set_group_status(Status_ENTERING_BUSINESS_DIRECTION)
    await context.bot.send_message(ADMIN_GROUP_ID, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–æ—Ç–º–µ–Ω–∞" –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ',
                                   reply_markup=ReplyKeyboardMarkup(CANCEL_BUTTON))


async def command_delete_business_direction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type == 'private':
        return
    if DB_ADMIN_STATUS != Status_MAIN:
        await context.bot.send_message(ADMIN_GROUP_ID, '–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫')
        return

    business_directions = db.get_business_directions('all')
    if business_directions is None:
        await context.bot.send_message(ADMIN_GROUP_ID, "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞")
        return
    assert len(business_directions) <= 100
    set_group_status(Status_PRESSING_BUSINESS_DIRECTION_TO_DELETE_ONE)
    global CALLBACK_DATA
    CALLBACK_DATA.clear()
    buttons = []
    for i in range(len(business_directions)):
        buttons.append([InlineKeyboardButton(business_directions[i], callback_data=f"btn_{i}")])
        CALLBACK_DATA[f"btn_{i}"] = business_directions[i]
    buttons.append([InlineKeyboardButton("–æ—Ç–º–µ–Ω–∞", callback_data="–æ—Ç–º–µ–Ω–∞")])
    await context.bot.send_message(ADMIN_GROUP_ID, '–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –Ω–∞–∂–º–∏ "–æ—Ç–º–µ–Ω–∞"',
                                   reply_markup=InlineKeyboardMarkup(buttons))


async def command_show_business_directions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type == 'private':
        return
    if DB_ADMIN_STATUS != Status_MAIN:
        await context.bot.send_message(ADMIN_GROUP_ID, '–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫')
        return

    business_directions = db.get_business_directions('all')
    if business_directions is None:
        await context.bot.send_message(ADMIN_GROUP_ID, "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞")
        return
    reply_msg = '–¢–µ–∫—É—â–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞:\n'
    for i in range(len(business_directions)):
        reply_msg += f"\n{i + 1}) {business_directions[i]}"
    await context.bot.send_message(ADMIN_GROUP_ID, reply_msg)


async def command_delete_sent_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type == 'private':
        return
    if DB_ADMIN_STATUS != Status_MAIN:
        await context.bot.send_message(ADMIN_GROUP_ID, '–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫')
        return

    last_sent_messages = db.get_last_sent_messages()
    if last_sent_messages is None:
        await context.bot.send_message(ADMIN_GROUP_ID, '–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å—É—Ç–æ–∫ –º—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞–º. –°–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –µ—â–µ —Ä–∞–Ω—å—à–µ —É–∂–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å')
        return
    set_group_status(Status_PRESSING_CLIENT_TO_DELETE_LAST_MESSAGE)
    global CALLBACK_DATA
    CALLBACK_DATA.clear()
    buttons = []
    for i in range(len(last_sent_messages)):
        tg_id, message_id, name, surname, phone_number = last_sent_messages[i]
        buttons.append([InlineKeyboardButton(f'{name} {surname}, {prettify_phone_number(phone_number)}', callback_data=f'{tg_id},{message_id}')])
        CALLBACK_DATA[f'{tg_id},{message_id}'] = f'{name} {surname}'
    buttons.append([InlineKeyboardButton("–ù–∏ —É –∫–æ–≥–æ –Ω–µ –Ω–∞–¥–æ", callback_data="–æ—Ç–º–µ–Ω–∞")])
    await context.bot.send_message(ADMIN_GROUP_ID, '–£ –∫–æ–≥–æ –∏–∑ –Ω–∏—Ö —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ?', reply_markup=InlineKeyboardMarkup(buttons))


async def error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.error(context.error)


def extract_status_change(chat_member_update: ChatMemberUpdated) -> Optional[Tuple[bool, bool]]:
    """Takes a ChatMemberUpdated instance and extracts whether the 'old_chat_member' was a member
    of the chat and whether the 'new_chat_member' is a member of the chat. Returns None, if
    the status didn't change.
    """
    status_change = chat_member_update.difference().get("status")
    old_is_member, new_is_member = chat_member_update.difference().get("is_member", (None, None))

    if status_change is None:
        return None

    old_status, new_status = status_change
    was_member = old_status in [
        ChatMember.MEMBER,
        ChatMember.OWNER,
        ChatMember.ADMINISTRATOR,
    ] or (old_status == ChatMember.RESTRICTED and old_is_member is True)
    is_member = new_status in [
        ChatMember.MEMBER,
        ChatMember.OWNER,
        ChatMember.ADMINISTRATOR,
    ] or (new_status == ChatMember.RESTRICTED and new_is_member is True)

    return was_member, is_member


async def track_chats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global ADMIN_GROUP_ID
    """Tracks the chats the bot is in."""
    result = extract_status_change(update.my_chat_member)
    if result is None:
        return
    was_member, is_member = result

    cause = update.effective_user
    chat = update.effective_chat
    if chat.type in [Chat.GROUP, Chat.SUPERGROUP]:
        if not was_member and is_member:
            logging.info(f"{cause.full_name} ({cause.id}) added the bot to the group \"{chat.title}\"")
            set_group_status(Status_MAIN)
            ADMIN_GROUP_ID = chat.id
            with open("admin_group_id.txt", "w") as f:
                f.write(str(ADMIN_GROUP_ID))
            await context.bot.set_my_commands(commands=bot_commands_group, scope=BotCommandScopeAllGroupChats())
            await context.bot.set_my_commands(commands=bot_commands_chats, scope=BotCommandScopeAllPrivateChats())
        elif was_member and not is_member:
            logging.info(f"{cause.full_name} ({cause.id}) removed the bot from the group \"{chat.title}\"")
            await context.bot.delete_my_commands(scope=BotCommandScopeAllPrivateChats())


def run_bot():
    print('Starting bot...')
    app = Application.builder().token(TOKEN).build()

    # Commands
    app.add_handler(CommandHandler('start', command_start))
    app.add_handler(CommandHandler('add_client', command_add_client))
    app.add_handler(CommandHandler('delete_client', command_delete_client))
    app.add_handler(CommandHandler('get_clients_data', command_get_clients_data))
    app.add_handler(CommandHandler('add_business_direction', command_add_business_direction))
    app.add_handler(CommandHandler('delete_business_direction', command_delete_business_direction))
    app.add_handler(CommandHandler('show_business_directions', command_show_business_directions))
    app.add_handler(CommandHandler('delete_sent_message', command_delete_sent_message))

    # Messages
    app.add_handler(MessageHandler(filters.TEXT, handle_message))

    # Files
    app.add_handler(MessageHandler(filters.ATTACHMENT, handle_file))

    # Callback buttons
    app.add_handler(CallbackQueryHandler(handle_callback))

    # Adding to group
    app.add_handler(ChatMemberHandler(track_chats, ChatMemberHandler.MY_CHAT_MEMBER))

    # Errors
    app.add_error_handler(error)

    # Pools the bot
    print('Polling...')
    app.run_polling(poll_interval=1)


def set_group_status(status: str):
    global DB_ADMIN_STATUS
    assert status == Status_MAIN or \
           status == Status_ENTERING_BUSINESS_DIRECTION or \
           status == Status_PRESSING_BUSINESS_DIRECTION_TO_DELETE_ONE or \
           status == Status_PRESSING_BUSINESS_DIRECTION_TO_ADD_NEW_CLIENT or \
           status == Status_ENTERING_CLIENTS_DATA or \
           status == Status_PRESSING_BUSINESS_DIRECTION_TO_SEND_FILE or \
           status == Status_PRESSING_CLIENT_TO_SEND_FILE or \
           status == Status_PRESSING_BUSINESS_DIRECTION_TO_DELETE_CLIENT or \
           status == Status_PRESSING_CLIENT_TO_DELETE_ONE or \
           status == Status_PRESSING_CLIENT_TO_DELETE_LAST_MESSAGE
    DB_ADMIN_STATUS = status


if __name__ == '__main__':
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
    logging.basicConfig(
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        filename='info.log',
        level=logging.INFO
    )
    logging.getLogger("httpx").setLevel(logging.WARNING)

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ File –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—Å—ã–ª–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    if not os.path.exists("File"):
        os.mkdir("File")
    else:
        for file_name in os.listdir("File"):
            os.remove(f"File/{file_name}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = Database(db_dbname=db_dbname,
                  db_host=db_host,
                  db_user=db_user,
                  db_password=db_password)
    # –°—Ç–∞—Ç—É—Å—ã
    Status_MAIN = 'main'
    Status_ENTERING_BUSINESS_DIRECTION = 'entering_business_direction'
    Status_PRESSING_BUSINESS_DIRECTION_TO_DELETE_ONE = 'pressing_business_direction'
    Status_PRESSING_BUSINESS_DIRECTION_TO_ADD_NEW_CLIENT = 'pressing_business_direction_to_add_new_client'
    Status_ENTERING_CLIENTS_DATA = 'entering_clients_data'
    Status_PRESSING_BUSINESS_DIRECTION_TO_SEND_FILE = 'pressing_business_direction_to_send_file'
    Status_PRESSING_CLIENT_TO_SEND_FILE = 'pressing_client_to_send_file'
    Status_PRESSING_BUSINESS_DIRECTION_TO_DELETE_CLIENT = 'pressing_business_direction_to_delete_client'
    Status_PRESSING_CLIENT_TO_DELETE_ONE = 'pressing_client_to_delete_one'
    Status_PRESSING_CLIENT_TO_DELETE_LAST_MESSAGE = 'pressing_client_to_delete_last_message'

    # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    DB_ADMIN_STATUS = Status_MAIN
    ADMIN_GROUP_ID = 0
    if os.path.exists("admin_group_id.txt"):
        with open("admin_group_id.txt") as file:
            ADMIN_GROUP_ID = int(file.read())
    CALLBACK_DATA = {}
    CANCEL_BUTTON = [[KeyboardButton("–æ—Ç–º–µ–Ω–∞")]]
    EXPECTED_CLIENTS_DATA_FORMAT = '\n'.join([
        '–§–∞–º–∏–ª–∏—è',
        '–ò–º—è',
        '–û—Ç—á–µ—Å—Ç–≤–æ',
        '–ø–æ–ª (–±—É–∫–≤–∞ "–º" –∏–ª–∏ "–∂")',
        'telegram id —á–µ–ª–æ–≤–µ–∫–∞ (–∏–º–µ–Ω–Ω–æ —Ü–∏—Ñ–µ—Ä–∫–∏)',
        '–ò–ù–ù',
        '–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
        '–ø–æ—á—Ç–∞',
    ])
    CURRENT_FILE = ''

    bot_commands_group = [
        ('add_client', '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑—É'),
        ('delete_client', '–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã'),
        ('get_clients_data', '–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ'),
        ('add_business_direction', '–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞'),
        ('delete_business_direction', '–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞'),
        ('show_business_directions', '–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞'),
        ('delete_sent_message', '–£–¥–∞–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'),
    ]
    bot_commands_chats = [
        ('start', '–ù–∞—á–∞—Ç—å –º–æ–Ω–æ–ª–æ–≥')
    ]
    run_bot()
