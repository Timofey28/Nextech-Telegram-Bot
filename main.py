import os
from datetime import time, datetime
import pytz
from typing import Optional, Tuple
import logging
import pandas as pd
import openpyxl as xl
from openpyxl.styles import Alignment, GradientFill
from telegram import (
    Chat,
    ChatMember,
    ChatMemberUpdated,
    Update,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    BotCommandScopeAllPrivateChats,
    BotCommandScopeChat,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ChatMemberHandler,
    CallbackQueryHandler,
    CallbackContext,
    Defaults,
)
from data import TOKEN, db_dbname, db_host, db_user, db_password
from database import Database
from debt_display_handler import DebtDisplayHandler
from debt_display_strategies.aggregation_by_dates import AggregationByDates
from debt_display_strategies.aggregation_by_people import AggregationByPeople
from clients import Clients
from contracts import Contracts
from payments import Payments
from global_vars import GlobalVars


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_type = update.message.chat.type
    chat_id = update.effective_chat.id
    msg = update.message.text

    if chat_type == 'private':
        try:
            await context.bot.send_message(gv.ACCOUNTANT_GROUP_ID, f'–ú–Ω–µ —Ç—É—Ç {update.effective_user.full_name} —á—Ç–æ-—Ç–æ –Ω–∞–ø–∏—Å–∞–ª, –Ω–µ —É–º–µ—é —á–∏—Ç–∞—Ç—å ( ‚¨á‚¨á')
            await context.bot.forward_message(gv.ACCOUNTANT_GROUP_ID, update.effective_user.id, update.message.id)
        except:
            logging.error('–Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞, —Ç–∞–∫ –∫–∞–∫ ADMIN_GROUP_ID == 0; –≤–æ–∑–º–æ–∂–Ω–æ, –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª "admin_group_id.txt"')
    elif chat_type == 'group':
        if chat_id == gv.ACCOUNTANT_GROUP_ID:
            if gv.ACCOUNTANT_GROUP_STATUS == gv.Status_ENTERING_BUSINESS_DIRECTION:
                await clients.enter_business_direction(update, context)

            elif gv.ACCOUNTANT_GROUP_STATUS == gv.Status_ENTERING_CLIENTS_DATA:
                await clients.enter_client_data(update, context)

            elif gv.ACCOUNTANT_GROUP_STATUS == gv.Status_EDITING_CLIENT:
                GROUP_ID = gv.ACCOUNTANT_GROUP_ID
                if msg == "–æ—Ç–º–µ–Ω–∞":
                    gv.set_group_status('accountant', gv.Status_IN_SECTION_CLIENTS)
                    await context.bot.send_message(GROUP_ID, '–•–æ—Ä–æ—à–æ üòâ', reply_markup=ReplyKeyboardRemove())
                else:
                    result = clients.check_entered_client_data_and_update(msg, gv.CALLBACK_DATA['client_id'])
                    if type(result) is str:
                        await context.bot.send_message(GROUP_ID, result)
                    else:
                        gv.set_group_status('accountant', gv.Status_IN_SECTION_CLIENTS)
                        if result:
                            await context.bot.send_message(GROUP_ID, '–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞–ª –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ ‚úÖ', reply_markup=ReplyKeyboardRemove())
                        else:
                            await context.bot.send_message(GROUP_ID, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ ‚ö†', reply_markup=ReplyKeyboardRemove())

            elif gv.ACCOUNTANT_GROUP_STATUS == gv.Status_SENDING_NEW_CONTRACT_TEMPLATE:
                gv.set_group_status('accountant', gv.Status_IN_SECTION_CONTRACTS)
                await context.bot.send_message(gv.ACCOUNTANT_GROUP_ID, '–û–∫', reply_markup=ReplyKeyboardRemove())

            elif gv.ACCOUNTANT_GROUP_STATUS == gv.Status_ENTERING_CONTRACT_INFO_STAGE_1:
                await contracts.enter_contract_data_stage_1(update, context)

            elif gv.ACCOUNTANT_GROUP_STATUS == gv.Status_ENTERING_CONTRACT_INFO_STAGE_2:
                GROUP_ID = gv.ACCOUNTANT_GROUP_ID
                if msg == "–æ—Ç–º–µ–Ω–∞":
                    gv.set_group_status('accountant', gv.Status_IN_SECTION_CONTRACTS)
                    await context.bot.send_message(GROUP_ID, 'üÜó', reply_markup=ReplyKeyboardRemove())

            elif gv.ACCOUNTANT_GROUP_STATUS == gv.Status_ENTERING_CONTRACT_INFO_STAGE_3:
                await contracts.enter_contract_data_stage_3(update, context)

            elif gv.ACCOUNTANT_GROUP_STATUS == gv.Status_SENDING_UPDATED_CONTRACT:
                GROUP_ID = gv.ACCOUNTANT_GROUP_ID
                if msg == '–æ—Ç–º–µ–Ω–∞':
                    gv.set_group_status('accountant', gv.Status_IN_SECTION_CONTRACTS)
                    await context.bot.send_message(GROUP_ID, 'üÜó', reply_markup=ReplyKeyboardRemove())

            elif gv.ACCOUNTANT_GROUP_STATUS == gv.Status_ENTERING_UPDATED_CONTRACT_PAYMENT_SCHEDULE:
                await contracts.enter_updated_contract_payment_schedule(update, context)

            elif gv.ACCOUNTANT_GROUP_STATUS == gv.Status_ENTERING_PAID_PAYMENT_INFO:
                await payments.enter_paid_payment_info(update, context)

    else:
        logging.warning(f'—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ —Ç–∏–ø–∞: {chat_type}')

    print(f'User ({update.message.chat.id}) in {chat_type}: "{msg}"')


async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query

    if gv.ACCOUNTANT_GROUP_STATUS == gv.Status_PRESSING_BUSINESS_DIRECTION_TO_DELETE_ONE:
        GROUP_ID = gv.ACCOUNTANT_GROUP_ID
        if query.data == "–æ—Ç–º–µ–Ω–∞":
            await context.bot.send_message(GROUP_ID, "–ö–∞–∫ —Å–∫–∞–∂–µ—à—å")
        else:
            chosen_direction = gv.CALLBACK_DATA[query.data]
            result = db.delete_business_direction(chosen_direction)
            if result is True:
                await context.bot.send_message(GROUP_ID, f'–£–¥–∞–ª–∏–ª –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ "{chosen_direction}" üëç')
            else:
                await context.bot.send_message(GROUP_ID, f'–ù–µ –º–æ–≥—É —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞ "{chosen_direction}", —Ç–∞–∫ –∫–∞–∫ –≤ –Ω–µ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫ üòê')
        gv.set_group_status('accountant', gv.Status_IN_SECTION_CLIENTS)

    elif gv.ACCOUNTANT_GROUP_STATUS == gv.Status_PRESSING_BUSINESS_DIRECTION_TO_ADD_NEW_CLIENT:
        GROUP_ID = gv.ACCOUNTANT_GROUP_ID
        if query.data == "–æ—Ç–º–µ–Ω–∞":
            gv.set_group_status('accountant', gv.Status_IN_SECTION_CLIENTS)
            await context.bot.send_message(GROUP_ID, "–î–∞ –ª–µ–≥–∫–æ")
        else:
            gv.set_group_status('accountant', gv.Status_ENTERING_CLIENTS_DATA)
            gv.CALLBACK_DATA['chosen_direction'] = gv.CALLBACK_DATA[query.data]
            reply_msg = f'–ë—ã–ª–æ –≤—ã–±—Ä–∞–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ "{gv.CALLBACK_DATA[query.data]}". –í–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n{clients.EXPECTED_CLIENTS_DATA_FORMAT_TO_ADD}\n\n–∏–ª–∏ –Ω–∞–∂–º–∏ "–æ—Ç–º–µ–Ω–∞"'
            await context.bot.send_message(GROUP_ID, reply_msg, reply_markup=ReplyKeyboardMarkup(gv.CANCEL_BUTTON))

    elif gv.ACCOUNTANT_GROUP_STATUS == gv.Status_PRESSING_BUSINESS_DIRECTION_TO_SEND_FILE:
        GROUP_ID = gv.ACCOUNTANT_GROUP_ID
        if query.data == "–æ—Ç–º–µ–Ω–∞":
            os.remove(gv.CURRENT_FILE)
            await context.bot.send_message(GROUP_ID, "üÜó")
            gv.set_group_status('accountant', gv.Status_MAIN)
        else:
            gv.set_group_status('accountant', gv.Status_PRESSING_CLIENT_TO_SEND_FILE)
            buttons = []
            clients_ = db.get_clients_from_business_direction(gv.CALLBACK_DATA[query.data])
            gv.CALLBACK_DATA.clear()
            for i in range(len(clients_)):
                name = clients_[i]['name']
                surname = clients_[i]['surname']
                tg_id = clients_[i]['tg_id']
                phone_number = clients_[i]['phone_number']
                buttons.append([InlineKeyboardButton(f'{name} {surname}, {prettify_phone_number(phone_number)}', callback_data=f'{tg_id}')])
                gv.CALLBACK_DATA[f'{tg_id}'] = f'{name} {surname}'
            buttons.append([InlineKeyboardButton("–Ω–∏–∫–æ–º—É, –∑–∞–±–µ–π", callback_data="–æ—Ç–º–µ–Ω–∞")])
            await context.bot.send_message(GROUP_ID, '–ö–æ–º—É –∏–∑ –Ω–∏—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?', reply_markup=InlineKeyboardMarkup(buttons))

    elif gv.ACCOUNTANT_GROUP_STATUS == gv.Status_PRESSING_CLIENT_TO_SEND_FILE:
        GROUP_ID = gv.ACCOUNTANT_GROUP_ID
        if query.data == "–æ—Ç–º–µ–Ω–∞":
            await context.bot.send_message(GROUP_ID, "üÜí")
        else:
            assert gv.CURRENT_FILE != ''
            try:
                sent_message = await context.bot.send_document(query.data, gv.CURRENT_FILE)
                db.write_sent_message_info(int(query.data), sent_message.message_id)
                await context.bot.send_message(GROUP_ID, f'–°–∫–∏–Ω—É–ª —Ñ–∞–π–ª –∫–ª–∏–µ–Ω—Ç—É –ø–æ –∏–º–µ–Ω–∏ {gv.CALLBACK_DATA[query.data]} ‚úÖ')
            except:
                await context.bot.send_message(GROUP_ID, f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∏–Ω—É—Ç—å —Ñ–∞–π–ª —á–µ–ª–æ–≤–µ–∫—É –ø–æ –∏–º–µ–Ω–∏ {gv.CALLBACK_DATA[query.data]}')
        os.remove(gv.CURRENT_FILE)
        gv.set_group_status('accountant', gv.Status_MAIN)

    elif gv.ACCOUNTANT_GROUP_STATUS == gv.Status_PRESSING_BUSINESS_DIRECTION_TO_DELETE_CLIENT:
        GROUP_ID = gv.ACCOUNTANT_GROUP_ID
        if query.data == "–æ—Ç–º–µ–Ω–∞":
            await context.bot.send_message(GROUP_ID, "–õ–∞–¥–Ω–æ, –∫–∞–∫ —Å–∫–∞–∂–µ—à—å üòâ")
            gv.set_group_status('accountant', gv.Status_IN_SECTION_CLIENTS)
        else:
            gv.set_group_status('accountant', gv.Status_PRESSING_CLIENT_TO_DELETE_ONE)
            buttons = []
            clients_ = db.get_clients_from_business_direction(gv.CALLBACK_DATA[query.data])
            gv.CALLBACK_DATA.clear()
            for i in range(len(clients_)):
                name = clients_[i]['name']
                surname = clients_[i]['surname']
                tg_id = clients_[i]['tg_id']
                phone_number = clients_[i]['phone_number']
                buttons.append([InlineKeyboardButton(f'{name} {surname}, {prettify_phone_number(phone_number)}', callback_data=f'{tg_id}')])
                gv.CALLBACK_DATA[f'{tg_id}'] = f'{name} {surname}'
            buttons.append([InlineKeyboardButton("–Ω–∏–∫–æ–≥–æ –Ω–µ –Ω–∞–¥–æ, –∑–∞–±–µ–π", callback_data="–æ—Ç–º–µ–Ω–∞")])
            await context.bot.send_message(GROUP_ID, '–ö–æ–≥–æ –∏–∑ –Ω–∏—Ö —É–¥–∞–ª–∏—Ç—å –∏–∑ –±–∞–∑—ã?', reply_markup=InlineKeyboardMarkup(buttons))

    elif gv.ACCOUNTANT_GROUP_STATUS == gv.Status_PRESSING_CLIENT_TO_DELETE_ONE:
        GROUP_ID = gv.ACCOUNTANT_GROUP_ID
        if query.data == "–æ—Ç–º–µ–Ω–∞":
            await context.bot.send_message(GROUP_ID, "–•–æ—Ä–æ—à–æ üòâ")
        else:
            db.delete_client(int(query.data))
            await context.bot.send_message(GROUP_ID, f'–£–¥–∞–ª–∏–ª –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ {gv.CALLBACK_DATA[query.data]} ‚úÖ')
        gv.set_group_status('accountant', gv.Status_IN_SECTION_CLIENTS)

    elif gv.ACCOUNTANT_GROUP_STATUS == gv.Status_PRESSING_CLIENT_TO_DELETE_LAST_MESSAGE:
        GROUP_ID = gv.ACCOUNTANT_GROUP_ID
        if query.data == "–æ—Ç–º–µ–Ω–∞":
            await context.bot.send_message(GROUP_ID, "–ù–µ –Ω–∞–¥–æ —Ç–∞–∫ –Ω–µ –Ω–∞–¥–æ üòâ")
        else:
            client_full_name = gv.CALLBACK_DATA[query.data]
            chat_id, message_id = list(map(int, query.data.split(',')))
            try:
                await context.bot.delete_message(chat_id, message_id)
                db.delete_sent_message_info(chat_id, message_id)
                await context.bot.send_message(GROUP_ID, f'–£–¥–∞–ª–∏–ª –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –ø–æ –∏–º–µ–Ω–∏ {client_full_name} ‚úÖ')
            except:
                await context.bot.send_message(GROUP_ID, f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –ø–æ –∏–º–µ–Ω–∏ {client_full_name}')
        gv.set_group_status('accountant', gv.Status_MAIN)

    elif gv.ACCOUNTANT_GROUP_STATUS == gv.Status_PRESSING_BUTTON_WHILE_PAYING_SALARIES:
        GROUP_ID = gv.ACCOUNTANT_GROUP_ID
        if query.data == "–æ—Ç–º–µ–Ω–∞":
            await context.bot.send_message(GROUP_ID, '–•–æ—Ä–æ—à–æ üóø')
            gv.set_group_status('accountant', gv.Status_MAIN)
        else:
            assert query.data == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" or query.data == "–æ–ø–ª–∞—á–µ–Ω–æ"
            if query.data == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
                gv.CURRENT_OFFSET += 1
                await context.bot.send_message(GROUP_ID, '–ü–æ–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞—é, –Ω–æ –º—ã –≤–µ—Ä–Ω–µ–º—Å—è –∫ —ç—Ç–æ–º—É –¥–æ–ª–≥—É –≤ –∫–æ–Ω—Ü–µ)')
            else:
                debt_display_handler.mark_shift_as_paid(gv.CURRENT_DEBT)
                await context.bot.send_message(GROUP_ID, '–ö–∞–π—Ñ üî•')

            msg, gv.CURRENT_DEBT = debt_display_handler.get_next_payment_message(offset=gv.CURRENT_OFFSET)
            if not msg:
                if gv.CURRENT_OFFSET != 0:
                    gv.CURRENT_OFFSET = 0
                    msg, gv.CURRENT_DEBT = debt_display_handler.get_next_payment_message()
                    if not msg:
                        await context.bot.send_message(GROUP_ID, '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—Å–µ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω—ã! ‚úÖü¶æ')
                        gv.set_group_status('accountant', gv.Status_MAIN)
                        return
                else:
                    await context.bot.send_message(GROUP_ID, '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—Å–µ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω—ã! ‚úÖü¶æ')
                    gv.set_group_status('accountant', gv.Status_MAIN)
                    return
            await context.bot.send_message(GROUP_ID, msg, parse_mode='markdown', reply_markup=InlineKeyboardMarkup(gv.PAY_SALARIES_INLINE_KEYBOARD))

    elif gv.ACCOUNTANT_GROUP_STATUS == gv.Status_PRESSING_BUTTON_TO_DECIDE_WHETHER_TO_PAY_SALARIES:
        GROUP_ID = gv.ACCOUNTANT_GROUP_ID
        assert query.data == "–Ω–µ —Å–µ–π—á–∞—Å" or query.data == "–æ–ø–ª–∞—Ç–∏—Ç—å"
        if query.data == "–Ω–µ —Å–µ–π—á–∞—Å":
            await context.bot.send_message(GROUP_ID, '–•–æ—Ä–æ—à–æ, –Ω–æ –Ω–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π —ç—Ç–æ –Ω–∞–¥–æ–ª–≥–æ üòâ')
            gv.set_group_status('accountant', gv.Status_MAIN)
        else:
            gv.CURRENT_OFFSET = 0
            msg, gv.CURRENT_DEBT = debt_display_handler.get_next_payment_message()
            gv.set_group_status('accountant', gv.Status_PRESSING_BUTTON_WHILE_PAYING_SALARIES)
            await context.bot.send_message(GROUP_ID, '–ù–∞—á–Ω–µ–º —Å –Ω–∞—á–∞–ª–∞ ‚¨áÔ∏è')
            await context.bot.send_message(GROUP_ID, msg, parse_mode='markdown', reply_markup=InlineKeyboardMarkup(gv.PAY_SALARIES_INLINE_KEYBOARD))

    elif gv.ACCOUNTANT_GROUP_STATUS == gv.Status_IN_SECTION_CLIENTS:
        if query.data == 'add_business_direction':
            await clients.add_business_direction(update, context)
        elif query.data == 'add_client':
            await clients.add_client(update, context)
        elif query.data == 'get_clients_data':
            await clients.get_clients_data(update, context)
        elif query.data == 'edit_client':
            await clients.edit_client_data(update, context)
        elif query.data == 'delete_client':
            await clients.delete_client(update, context)
        elif query.data == 'delete_business_direction':
            await clients.delete_business_direction(update, context)
        elif query.data == 'show_business_directions':
            await clients.show_business_directions(update, context)

    elif gv.ACCOUNTANT_GROUP_STATUS == gv.Status_PRESSING_BUSINESS_DIRECTION_TO_EDIT_CLIENT:
        GROUP_ID = gv.ACCOUNTANT_GROUP_ID
        if query.data == "–æ—Ç–º–µ–Ω–∞":
            await context.bot.send_message(GROUP_ID, "–õ–∞–¥–Ω–æ, –∫–∞–∫ —Å–∫–∞–∂–µ—à—å üòâ")
            gv.set_group_status('accountant', gv.Status_IN_SECTION_CLIENTS)
        else:
            gv.set_group_status('accountant', gv.Status_PRESSING_CLIENT_TO_EDIT_ONE)
            buttons = []
            clients_ = db.get_clients_from_business_direction(gv.CALLBACK_DATA[query.data])
            gv.CALLBACK_DATA.clear()
            for i in range(len(clients_)):
                idd = clients_[i]['id']
                surname = clients_[i]['surname']
                name = clients_[i]['name']
                phone_number = clients_[i]['phone_number']
                buttons.append([InlineKeyboardButton(f'{name} {surname}, {prettify_phone_number(phone_number)}', callback_data=f'{idd}')])
                gv.CALLBACK_DATA[f'{idd}'] = {
                    'surname': surname,
                    'name': name,
                    'phone_number': phone_number,
                    'patronymic': clients_[i]['patronymic'],
                    'sex': clients_[i]['sex'],
                    'tg_id': clients_[i]['tg_id'],
                    'inn': clients_[i]['inn'],
                    'email': clients_[i]['email'],
                }
            buttons.append([InlineKeyboardButton("–Ω–∏–∫–æ–≥–æ –Ω–µ –Ω–∞–¥–æ, –∑–∞–±–µ–π", callback_data="–æ—Ç–º–µ–Ω–∞")])
            await context.bot.send_message(GROUP_ID, '–ö–æ–≥–æ –∏–∑ –Ω–∏—Ö –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?', reply_markup=InlineKeyboardMarkup(buttons))

    elif gv.ACCOUNTANT_GROUP_STATUS == gv.Status_PRESSING_CLIENT_TO_EDIT_ONE:
        GROUP_ID = gv.ACCOUNTANT_GROUP_ID
        if query.data == "–æ—Ç–º–µ–Ω–∞":
            gv.set_group_status('accountant', gv.Status_IN_SECTION_CLIENTS)
            await context.bot.send_message(GROUP_ID, '–•–æ—Ä–æ—à–æ üòâ')
        else:
            gv.set_group_status('accountant', gv.Status_EDITING_CLIENT)
            print(gv.CALLBACK_DATA)
            client_data = gv.CALLBACK_DATA[query.data]
            msg = '–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:\n'
            msg += f"\n–§–∞–º–∏–ª–∏—è: {client_data['surname']}"
            msg += f"\n–ò–º—è: {client_data['name']}"
            msg += f"\n–û—Ç—á–µ—Å—Ç–≤–æ: {client_data['patronymic']}"
            msg += f"\n–ü–æ–ª: {'–º' if client_data['sex'] == 'male' else '–∂'}"
            msg += f"\n–ò–ù–ù: {client_data['inn']}"
            msg += f"\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {prettify_phone_number(client_data['phone_number'])}"
            msg += f"\n–ü–æ—á—Ç–∞: {client_data['email']}"
            await context.bot.send_message(GROUP_ID, msg)
            gv.CALLBACK_DATA['client_id'] = query.data
            msg = f'–í–≤–µ–¥–∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n{clients.EXPECTED_CLIENTS_DATA_FORMAT_TO_EDIT}\n\n–∏–ª–∏ –Ω–∞–∂–º–∏ "–æ—Ç–º–µ–Ω–∞"'
            await context.bot.send_message(GROUP_ID, msg, reply_markup=ReplyKeyboardMarkup(gv.CANCEL_BUTTON))

    elif gv.ACCOUNTANT_GROUP_STATUS == gv.Status_IN_SECTION_CONTRACTS:
        if query.data == 'send_contract_template':
            await contracts.send_contract_template(update, context)
        elif query.data == 'add_contract':
            await contracts.add_contract(update, context)
        elif query.data == 'list_of_contracts':
            await contracts.list_of_contracts(update, context)
        elif query.data == 'send_contract':
            await contracts.send_contract(update, context)
        elif query.data == 'edit_contract':
            await contracts.edit_contract(update, context)
        elif query.data == 'add_or_change_contract_template':
            await contracts.add_or_change_contract_template(update, context)
        elif query.data == 'delete_contract_template':
            await contracts.delete_contract_template(update, context)

    elif gv.ACCOUNTANT_GROUP_STATUS == gv.Status_PRESSING_CONTRACT_TEMPLATE_TO_SEND_ONE:
        GROUP_ID = gv.ACCOUNTANT_GROUP_ID
        gv.set_group_status('accountant', gv.Status_IN_SECTION_CONTRACTS)
        if query.data == '–æ—Ç–º–µ–Ω–∞':
            await context.bot.send_message(GROUP_ID, '–õ–∞–¥–Ω–æ üåö')
        else:
            contract_template_file = gv.CALLBACK_DATA[query.data]
            await context.bot.send_document(GROUP_ID, f'{gv.PATH_CONCTRACT_TEMPLATES}/{contract_template_file}')

    elif gv.ACCOUNTANT_GROUP_STATUS == gv.Status_PRESSING_CONTRACT_TEMPLATE_TO_DELETE_ONE:
        GROUP_ID = gv.ACCOUNTANT_GROUP_ID
        gv.set_group_status('accountant', gv.Status_IN_SECTION_CONTRACTS)
        if query.data == '–æ—Ç–º–µ–Ω–∞':
            await context.bot.send_message(GROUP_ID, '–ü—Ä–∏–Ω—è–ª ü´°')
        else:
            os.remove(f'{gv.PATH_CONCTRACT_TEMPLATES}/{gv.CALLBACK_DATA[query.data]}')
            await context.bot.send_message(GROUP_ID, '–£–¥–∞–ª–∏–ª üëç')

    elif gv.ACCOUNTANT_GROUP_STATUS == gv.Status_PRESSING_BUSINESS_DIRECTION_TO_ADD_NEW_CONTRACT:
        GROUP_ID = gv.ACCOUNTANT_GROUP_ID
        if query.data == "–æ—Ç–º–µ–Ω–∞":
            gv.set_group_status('accountant', gv.Status_IN_SECTION_CONTRACTS)
            await context.bot.send_message(GROUP_ID, 'üÜó')
        else:
            gv.set_group_status('accountant', gv.Status_PRESSING_CLIENT_TO_ADD_NEW_CONTRACT)
            buttons = []
            clients_ = db.get_clients_from_business_direction(gv.CALLBACK_DATA[query.data])
            gv.CALLBACK_DATA.clear()
            for i in range(len(clients_)):
                idd = clients_[i]['id']
                surname = clients_[i]['surname']
                name = clients_[i]['name']
                phone_number = clients_[i]['phone_number']
                buttons.append([InlineKeyboardButton(f'{name} {surname}, {prettify_phone_number(phone_number)}', callback_data=f'{idd}')])
            buttons.append([InlineKeyboardButton("–Ω–∏–∫–æ–º—É –Ω–µ –Ω–∞–¥–æ, –∑–∞–±–µ–π", callback_data="–æ—Ç–º–µ–Ω–∞")])
            await context.bot.send_message(GROUP_ID, '–ö–æ–º—É –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä?', reply_markup=InlineKeyboardMarkup(buttons))

    elif gv.ACCOUNTANT_GROUP_STATUS == gv.Status_PRESSING_CLIENT_TO_ADD_NEW_CONTRACT:
        GROUP_ID = gv.ACCOUNTANT_GROUP_ID
        if query.data == "–æ—Ç–º–µ–Ω–∞":
            gv.set_group_status('accountant', gv.Status_IN_SECTION_CONTRACTS)
            await context.bot.send_message(GROUP_ID, 'üÜó')
        else:
            gv.CALLBACK_DATA['client_id'] = int(query.data)
            gv.set_group_status('accountant', gv.Status_ENTERING_CONTRACT_INFO_STAGE_1)
            msg = '–î–∞–Ω–Ω—ã–µ –¥–æ–≥–æ–≤–æ—Ä–∞ –≤–≤–æ–¥—è—Ç—Å—è –≤ 3 —ç—Ç–∞–ø–∞. –ò–∑ –ª—é–±–æ–≥–æ —ç—Ç–∞–ø–∞ –º–æ–∂–Ω–æ –≤—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "–æ—Ç–º–µ–Ω–∞". –ü—Ä–∏ —ç—Ç–æ–º –ø–æ—Ç–µ—Ä—è—é—Ç—Å—è –≤—Å–µ —Ä–∞–Ω–µ–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
            await context.bot.send_message(GROUP_ID, msg)
            msg = '–≠—Ç–∞–ø 1Ô∏è‚É£. –í–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n\n1) –ö–æ–º–ø–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ (–ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–æ—Å—Ç–∞–≤—å –ø—Ä–æ—á–µ—Ä–∫ "-")'
            msg += '\n2) –î–∞—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–¥–¥.–º–º.–≥–≥"'
            msg += '\n3) –ü–æ–ª–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ (–ª–∏–±–æ –µ–∂–µ–º–µ—Å—è—á–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞, –µ—Å–ª–∏ –¥–æ–≥–æ–≤–æ—Ä —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π)'
            msg += '\n\n–°—Ç—Ä–æ–∫–∏ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–ª—è—Ç—å –ø—É—Å—Ç—ã–º–∏, —Ç–æ–≥–¥–∞ –æ–Ω–∏ –Ω–µ –±—É–¥—É—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è'
            await context.bot.send_message(GROUP_ID, msg, reply_markup=ReplyKeyboardMarkup(gv.CANCEL_BUTTON))

    elif gv.ACCOUNTANT_GROUP_STATUS == gv.Status_PRESSING_BUSINESS_DIRECTION_TO_EDIT_CONTRACT:
        GROUP_ID = gv.ACCOUNTANT_GROUP_ID
        if query.data == "–æ—Ç–º–µ–Ω–∞":
            gv.set_group_status('accountant', gv.Status_IN_SECTION_CONTRACTS)
            await context.bot.send_message(GROUP_ID, 'üÜó')
        else:
            gv.set_group_status('accountant', gv.Status_PRESSING_CLIENT_TO_EDIT_CONTRACT)
            buttons = []
            clients_ = db.get_clients_having_active_contracts_from_business_direction(gv.CALLBACK_DATA[query.data])
            gv.CALLBACK_DATA.clear()
            for client in clients_:
                idd = client['id']
                surname = client['surname']
                name = client['name']
                phone_number = client['phone_number']
                buttons.append([InlineKeyboardButton(f'{name} {surname}, {prettify_phone_number(phone_number)}', callback_data=f'{idd}')])
            buttons.append([InlineKeyboardButton("–Ω–∏ —Å –∫–µ–º, –∑–∞–±–µ–π", callback_data="–æ—Ç–º–µ–Ω–∞")])
            await context.bot.send_message(GROUP_ID, '–î–æ–≥–æ–≤–æ—Ä —Å –∫–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?', reply_markup=InlineKeyboardMarkup(buttons))

    elif gv.ACCOUNTANT_GROUP_STATUS == gv.Status_PRESSING_CLIENT_TO_EDIT_CONTRACT:
        GROUP_ID = gv.ACCOUNTANT_GROUP_ID
        if query.data == "–æ—Ç–º–µ–Ω–∞":
            gv.set_group_status('accountant', gv.Status_IN_SECTION_CONTRACTS)
            await context.bot.send_message(GROUP_ID, 'üÜó')
        else:
            contracts_ = db.get_client_contracts(int(query.data))
            if contracts_ is None:
                logging.error("client can't have no contracts")
                exit(0)
            gv.CALLBACK_DATA.clear()
            if len(contracts_) == 1:
                gv.set_group_status('accountant', gv.Status_CHOOSING_WHAT_IN_CONTRACT_TO_EDIT)
                gv.CALLBACK_DATA['contract_id'] = contracts_[0][0]
                gv.CALLBACK_DATA['contract_file_name'] = contracts_[0][1]
                gv.CALLBACK_DATA['contract_type'] = contracts_[0][2]
                await context.bot.send_message(GROUP_ID, '–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?', reply_markup=InlineKeyboardMarkup(contracts.CONTRACT_EDITING_OPTIONS))
            else:
                gv.set_group_status('accountant', gv.Status_CHOOSING_WHICH_CONTRACT_TO_EDIT)
                buttons = []
                for contract in contracts_:
                    idd, name, typee = contract
                    buttons.append([InlineKeyboardButton(name, callback_data=f'{idd}')])
                    gv.CALLBACK_DATA[f'{idd}'] = [name, typee]
                buttons.append([InlineKeyboardButton("–Ω–∏–∫–∞–∫–æ–π, –∑–∞–±–µ–π", callback_data="–æ—Ç–º–µ–Ω–∞")])
                await context.bot.send_message(GROUP_ID, '–ö–∞–∫–æ–π –∏–∑ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?', reply_markup=InlineKeyboardMarkup(buttons))

    elif gv.ACCOUNTANT_GROUP_STATUS == gv.Status_CHOOSING_WHICH_CONTRACT_TO_EDIT:
        GROUP_ID = gv.ACCOUNTANT_GROUP_ID
        if query.data == "–æ—Ç–º–µ–Ω–∞":
            gv.set_group_status('accountant', gv.Status_IN_SECTION_CONTRACTS)
            await context.bot.send_message(GROUP_ID, 'üÜó')
        else:
            gv.set_group_status('accountant', gv.Status_CHOOSING_WHAT_IN_CONTRACT_TO_EDIT)
            gv.CALLBACK_DATA['contract_id'] = int(query.data)
            gv.CALLBACK_DATA['contract_file_name'] = gv.CALLBACK_DATA[query.data][0]
            gv.CALLBACK_DATA['contract_type'] = gv.CALLBACK_DATA[query.data][1]
            await context.bot.send_message(GROUP_ID, '–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?', reply_markup=InlineKeyboardMarkup(contracts.CONTRACT_EDITING_OPTIONS))

    elif gv.ACCOUNTANT_GROUP_STATUS == gv.Status_CHOOSING_WHAT_IN_CONTRACT_TO_EDIT:
        GROUP_ID = gv.ACCOUNTANT_GROUP_ID
        contract_id = gv.CALLBACK_DATA['contract_id']
        if query.data == "–æ—Ç–º–µ–Ω–∞":
            gv.set_group_status('accountant', gv.Status_IN_SECTION_CONTRACTS)
            await context.bot.send_message(GROUP_ID, 'üÜó')
        elif query.data == 'payment_schedule':
            await contracts.edit_contract_payment_schedule(update, context)
        elif query.data == 'change_document_itself':
            gv.set_group_status('accountant', gv.Status_SENDING_UPDATED_CONTRACT)
            await context.bot.send_message(GROUP_ID, '–°–∫–∏–Ω—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä ‚¨á', reply_markup=ReplyKeyboardMarkup(gv.CANCEL_BUTTON))
        elif query.data == 'close_contract':
            gv.set_group_status('accountant', gv.Status_IN_SECTION_CONTRACTS)
            db.mark_contract_closed(contract_id)
            await context.bot.send_message(GROUP_ID, '–ó–∞–∫—Ä—ã–ª üëç')

    elif gv.ACCOUNTANT_GROUP_STATUS == gv.Status_PRESSING_BUSINESS_DIRECTION_TO_SEND_CONTRACT:
        GROUP_ID = gv.ACCOUNTANT_GROUP_ID
        if query.data == "–æ—Ç–º–µ–Ω–∞":
            gv.set_group_status('accountant', gv.Status_IN_SECTION_CONTRACTS)
            await context.bot.send_message(GROUP_ID, 'üÜó')
        else:
            gv.set_group_status('accountant', gv.Status_PRESSING_CLIENT_TO_SEND_CONTRACT)
            buttons = []
            clients_ = db.get_clients_having_active_contracts_from_business_direction(gv.CALLBACK_DATA[query.data])
            gv.CALLBACK_DATA.clear()
            for client in clients_:
                idd = client['id']
                surname = client['surname']
                name = client['name']
                phone_number = client['phone_number']
                buttons.append([InlineKeyboardButton(f'{name} {surname}, {prettify_phone_number(phone_number)}', callback_data=f'{idd}')])
            buttons.append([InlineKeyboardButton("–Ω–∏ —Å –∫–µ–º, –∑–∞–±–µ–π", callback_data="–æ—Ç–º–µ–Ω–∞")])
            await context.bot.send_message(GROUP_ID, '–î–æ–≥–æ–≤–æ—Ä —Å –∫–µ–º —Å–∫–∏–Ω—É—Ç—å?', reply_markup=InlineKeyboardMarkup(buttons))

    elif gv.ACCOUNTANT_GROUP_STATUS == gv.Status_PRESSING_CLIENT_TO_SEND_CONTRACT:
        GROUP_ID = gv.ACCOUNTANT_GROUP_ID
        if query.data == "–æ—Ç–º–µ–Ω–∞":
            gv.set_group_status('accountant', gv.Status_IN_SECTION_CONTRACTS)
            await context.bot.send_message(GROUP_ID, 'üÜó')
        else:
            contracts_ = db.get_client_contracts(int(query.data))
            if contracts_ is None:
                logging.error("client can't have no contracts")
                exit(0)
            gv.CALLBACK_DATA.clear()
            if len(contracts_) == 1:
                gv.set_group_status('accountant', gv.Status_IN_SECTION_CONTRACTS)
                await context.bot.send_document(GROUP_ID, f'{gv.PATH_CONTRACTS}/{contracts_[0][1]}')
            else:
                gv.set_group_status('accountant', gv.Status_CHOOSING_WHICH_CONTRACT_TO_SEND)
                buttons = []
                for contract in contracts_:
                    idd, name, typee = contract
                    buttons.append([InlineKeyboardButton(name, callback_data=f'{idd}')])
                    gv.CALLBACK_DATA[f'{idd}'] = name
                buttons.append([InlineKeyboardButton("–Ω–∏–∫–∞–∫–æ–π, –∑–∞–±–µ–π", callback_data="–æ—Ç–º–µ–Ω–∞")])
                await context.bot.send_message(GROUP_ID, '–ö–∞–∫–æ–π –∏–∑ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ —Å–∫–∏–Ω—É—Ç—å?', reply_markup=InlineKeyboardMarkup(buttons))

    elif gv.ACCOUNTANT_GROUP_STATUS == gv.Status_CHOOSING_WHICH_CONTRACT_TO_SEND:
        GROUP_ID = gv.ACCOUNTANT_GROUP_ID
        gv.set_group_status('accountant', gv.Status_IN_SECTION_CONTRACTS)
        if query.data == "–æ—Ç–º–µ–Ω–∞":
            await context.bot.send_message(GROUP_ID, 'üÜó')
        else:
            await context.bot.send_document(GROUP_ID, f'{gv.PATH_CONTRACTS}/{gv.CALLBACK_DATA[query.data]}')

    elif gv.ACCOUNTANT_GROUP_STATUS == gv.Status_IN_SECTION_PAYMENTS:
        if query.data == 'add_paid_payment':
            await payments.add_paid_payment(update, context)
        elif query.data == 'scheduled_payments_for_today_tomorrow':
            GROUP_ID = gv.ACCOUNTANT_GROUP_ID
            msg, remark = payments.get_scheduled_payments_for_today_tomorrow_msg()
            if msg:
                await context.bot.send_message(GROUP_ID, msg, parse_mode='markdown')
                if remark:
                    await context.bot.send_message(GROUP_ID, remark)
            else:
                await context.bot.send_message(GROUP_ID, '–ü–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –ø–ª–∞—Ç–µ–∂–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–µ—Ç')
        elif query.data == 'payment_schedule':
            await payments.payment_schedule(update, context)
        elif query.data == 'list_of_clients_debts':
            await payments.list_of_clients_debts(update, context)
        elif query.data == 'list_of_actual_payments':
            await payments.list_of_actual_payments(update, context)

    elif gv.ACCOUNTANT_GROUP_STATUS == gv.Status_ADDING_PAID_PAYMENT_CONFIRMATION:
        GROUP_ID = gv.ACCOUNTANT_GROUP_ID
        gv.set_group_status('accountant', gv.Status_IN_SECTION_PAYMENTS)
        if query.data == 'no':
            await context.bot.send_message(GROUP_ID, 'üÜó', reply_markup=ReplyKeyboardRemove())
        elif query.data == 'yes':
            contract_code = gv.CALLBACK_DATA['contract_code']
            payment_date = gv.CALLBACK_DATA['payment_date']
            payment_amount = gv.CALLBACK_DATA['payment_amount']
            db.add_paid_payment(contract_code, payment_date, payment_amount)
            await context.bot.send_message(GROUP_ID, '–î–æ–±–∞–≤–∏–ª ‚úÖ', reply_markup=ReplyKeyboardRemove())


async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in [gv.ADMIN_GROUP_ID, gv.ACCOUNTANT_GROUP_ID]:
        return
    if chat_id == gv.ACCOUNTANT_GROUP_ID and gv.ACCOUNTANT_GROUP_STATUS not in [gv.Status_MAIN, gv.Status_IN_SECTION_CLIENTS,
                                                                                gv.Status_IN_SECTION_CONTRACTS, gv.Status_IN_SECTION_PAYMENTS,
                                                                                gv.Status_SENDING_NEW_CONTRACT_TEMPLATE,
                                                                                gv.Status_ENTERING_CONTRACT_INFO_STAGE_2,
                                                                                gv.Status_SENDING_UPDATED_CONTRACT]:
        await context.bot.send_message(gv.ACCOUNTANT_GROUP_ID, '–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∞–≤ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫')
        return

    if chat_id == gv.ACCOUNTANT_GROUP_ID:
        GROUP_ID = gv.ACCOUNTANT_GROUP_ID
        if gv.ACCOUNTANT_GROUP_STATUS == gv.Status_SENDING_NEW_CONTRACT_TEMPLATE:
            gv.set_group_status('accountant', gv.Status_IN_SECTION_CONTRACTS)
            contract_template_names = os.listdir(gv.PATH_CONCTRACT_TEMPLATES)
            file_name = update.message.document.file_name
            file_id = update.message.document.file_id
            tgFileInstance = await context.bot.get_file(file_id)
            if file_name in contract_template_names:
                os.remove(f'{gv.PATH_CONCTRACT_TEMPLATES}/{file_name}')
                await tgFileInstance.download_to_drive(f'{gv.PATH_CONCTRACT_TEMPLATES}/{file_name}')
                await context.bot.send_message(GROUP_ID, '–ó–∞–º–µ–Ω–∏–ª —à–∞–±–ª–æ–Ω –¥–æ–≥–æ–≤–æ—Ä–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ üëå', reply_markup=ReplyKeyboardRemove())
            else:
                await tgFileInstance.download_to_drive(f'{gv.PATH_CONCTRACT_TEMPLATES}/{file_name}')
                await context.bot.send_message(GROUP_ID, '–î–æ–±–∞–≤–∏–ª —à–∞–±–ª–æ–Ω –¥–æ–≥–æ–≤–æ—Ä–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä üëå', reply_markup=ReplyKeyboardRemove())

        elif gv.ACCOUNTANT_GROUP_STATUS == gv.Status_ENTERING_CONTRACT_INFO_STAGE_2:
            file_name = update.message.document.file_name
            if not file_name.startswith('–î–æ–≥–æ–≤–æ—Ä '):
                msg = '–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥–æ–±–Ω–æ —Å–ª–µ–¥—É—é—â–µ–º—É: "–î–æ–≥–æ–≤–æ—Ä –ê1 –æ—Ç 03.04.2024–≥." –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –Ω–∞–∂–º–∏ "–æ—Ç–º–µ–Ω–∞"'
                await context.bot.send_message(GROUP_ID, msg)
                return
            if contracts.contract_name_has_english_letters(file_name[:file_name.rfind('.')]):
                msg = '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã. –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –Ω–∞–∂–º–∏ "–æ—Ç–º–µ–Ω–∞"'
                await context.bot.send_message(GROUP_ID, msg)
                return
            existing_contract_names = os.listdir(gv.PATH_CONTRACTS)
            if file_name in existing_contract_names:
                await context.bot.send_message(GROUP_ID, '–î–æ–≥–æ–≤–æ—Ä —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ –∏–º—è –∏–ª–∏ –Ω–∞–∂–º–∏ "–æ—Ç–º–µ–Ω–∞"')
                return
            contract_code = file_name[file_name.find(' ') + 1:]
            contract_code = contract_code[:contract_code.find(' ')].strip()
            if db.contract_code_exists(contract_code):
                msg = f'–î–æ–≥–æ–≤–æ—Ä —Å –Ω–æ–º–µ—Ä–æ–º "{contract_code}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –Ω–∞–∂–º–∏ "–æ—Ç–º–µ–Ω–∞"'
                await context.bot.send_message(GROUP_ID, msg)
                return
            gv.CALLBACK_DATA['file_name'] = file_name
            gv.CALLBACK_DATA['contract_code'] = contract_code
            gv.CALLBACK_DATA['contract_type'] = 'regular' if file_name[8].lower() == '–∞' else 'onetime'
            gv.CURRENT_FILE = f'File/{file_name}'
            file_id = update.message.document.file_id
            tgFileInstance = await context.bot.get_file(file_id)
            await tgFileInstance.download_to_drive(gv.CURRENT_FILE)
            gv.set_group_status('accountant', gv.Status_ENTERING_CONTRACT_INFO_STAGE_3)
            msg = '–≠—Ç–∞–ø 3Ô∏è‚É£. –í–≤–µ–¥–∏ –ø–ª–∞–Ω–æ–≤—ã–µ –¥–∞—Ç—ã –∏ —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–µ–π –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n'
            if gv.CALLBACK_DATA['contract_type'] == 'regular':
                msg += '–ß–∏—Å–ª–æ –º–µ—Å—è—Ü–∞ –æ—Ç 1 –¥–æ 28 - —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞'
            else:
                msg += '–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–¥–¥.–º–º.–≥–≥." - —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞'
            msg += '\n\n–°–∫–æ–ª—å–∫–æ –ø–ª–∞—Ç–µ–∂–µ–π, —Å—Ç–æ–ª—å–∫–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏ —Å—Ç—Ä–æ–∫ –≤–≤–æ–¥–∞'
            await context.bot.send_message(GROUP_ID, msg)

        elif gv.ACCOUNTANT_GROUP_STATUS == gv.Status_SENDING_UPDATED_CONTRACT:
            file_name = update.message.document.file_name
            if file_name != gv.CALLBACK_DATA['contract_file_name']:
                await context.bot.send_message(GROUP_ID, '–ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∏–º–µ–Ω–µ–º —Å—Ç–∞—Ä–æ–≥–æ. –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–æ—Ç–º–µ–Ω–∞"')
                return
            gv.set_group_status('accountant', gv.Status_IN_SECTION_CONTRACTS)
            gv.CURRENT_FILE = f'File/{file_name}'
            file_id = update.message.document.file_id
            tgFileInstance = await context.bot.get_file(file_id)
            await tgFileInstance.download_to_drive(gv.CURRENT_FILE)
            os.replace(gv.CURRENT_FILE, f'{gv.PATH_CONTRACTS}/{file_name}')
            await context.bot.send_message(GROUP_ID, '–ó–∞–º–µ–Ω–∏–ª —Ñ–∞–π–ª –¥–æ–≥–æ–≤–æ—Ä–∞ üëå', reply_markup=ReplyKeyboardRemove())

        else:  # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –∫–ª–∏–µ–Ω—Ç—É
            business_directions = db.get_business_directions('non-empty')
            if business_directions is None:
                await context.bot.send_message(GROUP_ID, '–ù–µ–∫–æ–º—É —Å–ª–∞—Ç—å —Ñ–∞–π–ª, –≤ –±–∞–∑–µ –ø–æ–∫–∞ —á—Ç–æ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç')
                return
            file_id = update.message.document.file_id
            gv.CURRENT_FILE = f'File/{update.message.document.file_name}'
            tgFileInstance = await context.bot.get_file(file_id)
            await tgFileInstance.download_to_drive(gv.CURRENT_FILE)

            gv.set_group_status('accountant', gv.Status_PRESSING_BUSINESS_DIRECTION_TO_SEND_FILE)
            gv.CALLBACK_DATA.clear()
            buttons = []
            for i in range(len(business_directions)):
                buttons.append([InlineKeyboardButton(business_directions[i], callback_data=f"btn_{i}")])
                gv.CALLBACK_DATA[f"btn_{i}"] = business_directions[i]
            buttons.append([InlineKeyboardButton("–Ω–∏–∫–æ–º—É, –∑–∞–±–µ–π", callback_data="–æ—Ç–º–µ–Ω–∞")])
            await context.bot.send_message(GROUP_ID, '–ö–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª? –í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞', reply_markup=InlineKeyboardMarkup(buttons))

    elif chat_id == gv.ADMIN_GROUP_ID:
        GROUP_ID = gv.ADMIN_GROUP_ID
        if update.message.document.file_name[-5:] != '.xlsx':
            await context.bot.send_message(GROUP_ID, '–¢—ã –ø—Ä–∏–∫–∞–ª—ã–≤–∞–µ—à—å—Å—è? –£ —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ ".xlsx" ü§¶‚Äç‚ôÇÔ∏è')
            return
        try:
            file_path = update.message.document.file_name
            datetime.strptime(file_path[:file_path.rfind('.')], '%d%m%y').date()
        except ValueError:
            await context.bot.send_message(GROUP_ID, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞. –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–¥–¥–º–º–≥–≥"')
            return
        gv.CURRENT_FILE = f'File/{update.message.document.file_name}'
        file_id = update.message.document.file_id
        tgFileInstance = await context.bot.get_file(file_id)
        await tgFileInstance.download_to_drive(gv.CURRENT_FILE)

        error_log = db.write_payments_data(gv.CURRENT_FILE)
        os.remove(gv.CURRENT_FILE)
        if error_log:
            await context.bot.send_message(GROUP_ID, f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª (\n\n{error_log}')
            return

        informator = 'informator'
        current_jobs = context.job_queue.get_jobs_by_name(informator)
        if current_jobs:
            for job in current_jobs:
                job.schedule_removal()
        context.job_queue.run_once(inform_accountant_about_new_debts, 2, name=informator)

        await context.bot.send_message(GROUP_ID, '–ó–∞–ø–∏—Å–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö ‚úÖ')


async def inform_accountant_about_new_debts(context: CallbackContext):
    msg = debt_display_handler.get_unpaid_shifts_message()
    if msg:
        msg = f'–£ –Ω–∞—Å –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏. –í–æ—Ç –≤—Å–µ –æ–Ω–∏ –≤ –æ–¥–Ω–æ–º —Å–ø–∏—Å–∫–µ üëá\n\n' + msg
        if gv.ACCOUNTANT_GROUP_STATUS in [gv.Status_MAIN, gv.Status_PRESSING_BUTTON_TO_DECIDE_WHETHER_TO_PAY_SALARIES]:
            gv.set_group_status('accountant', gv.Status_PRESSING_BUTTON_TO_DECIDE_WHETHER_TO_PAY_SALARIES)
            buttons = [[InlineKeyboardButton('–ù–µ —Å–µ–π—á–∞—Å üßë‚Äçüíª', callback_data='–Ω–µ —Å–µ–π—á–∞—Å'),
                        InlineKeyboardButton('–û–ø–ª–∞—Ç–∏—Ç—å üèÉ‚Äç‚ôÇÔ∏è', callback_data='–æ–ø–ª–∞—Ç–∏—Ç—å')]]
            await context.bot.send_message(gv.ACCOUNTANT_GROUP_ID, msg, reply_markup=InlineKeyboardMarkup(buttons))
        else:
            await context.bot.send_message(gv.ACCOUNTANT_GROUP_ID, msg)
    else:
        await context.bot.send_message(gv.ADMIN_GROUP_ID, '–ù–µ –Ω–∞—à–µ–ª –Ω–æ–≤—ã—Ö –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π –≤ —Ñ–∞–π–ª–µ, —Ç—ã –ø—Ä–æ–≤–µ—Ä—è–ª –º–µ–Ω—è, –¥–∞? üòé')


async def debt_reminder(context: CallbackContext):
    msg = debt_display_handler.get_unpaid_shifts_message()
    if msg:
        msg = '–•–æ—á—É –Ω–∞–ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –Ω–∞—Å –µ—Å—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º–∏ —Å–∫–ª–∞–¥–∞, –±—ã–ª–æ –±—ã –Ω–µ–ø–ª–æ—Ö–æ –∏—Ö –ø–æ–≥–∞—Å–∏—Ç—å) üëá\n\n' + msg
        await context.bot.send_message(gv.ACCOUNTANT_GROUP_ID, msg)


async def today_tomorrow_scheduled_payments_reminder(context: CallbackContext):
    msg, remark = payments.get_scheduled_payments_for_today_tomorrow_msg()
    if msg:
        await context.bot.send_message(gv.ACCOUNTANT_GROUP_ID, msg, parse_mode='markdown')
        if remark:
            await context.bot.send_message(gv.ACCOUNTANT_GROUP_ID, remark)


async def command_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type == 'private':  # –µ—Å–ª–∏ –Ω–∞–ø–∏—Å–∞–ª –ø—Ä–æ—Å—Ç–æ–π —Å–º–µ—Ä—Ç–Ω—ã–π
        tg_id = update.effective_chat.id
        if db.client_exists(tg_id):
            await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞)')
            client_info = db.get_clients_data(update.effective_user.id)
            if client_info:
                surname, name, patronymic, sex, tg_id, inn, bd_name, phone_number, email = client_info
                msg = f'–•–æ—Ä–æ—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏! –ù–∞—à –∫–ª–∏–µ–Ω—Ç, {name} {surname} [{prettify_phone_number(phone_number)}], —Ç–æ–ª—å–∫–æ —á—Ç–æ –Ω–∞–ø–∏—Å–∞–ª –º–Ω–µ –∏ —Ç–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–º—É —Ñ–∞–π–ª—ã üòÉ'
                await context.bot.send_message(gv.ACCOUNTANT_GROUP_ID, msg)
        else:
            await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –ï—Å–ª–∏ —Ç—ã –æ—Ñ–æ—Ä–º–∏–ª –ø–æ–¥–ø–∏—Å–∫—É, —Ç–æ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –≤ –±–∞–∑—É. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤—è—Ç, —è —Å—Ä–∞–∑—É —Å–æ–æ–±—â—É ;)')
    elif update.effective_chat.id == gv.ACCOUNTANT_GROUP_ID:
        if not context.job_queue.jobs():
            context.job_queue.run_daily(debt_reminder, time(17, 0, 0, 0))
            context.job_queue.run_daily(today_tomorrow_scheduled_payments_reminder, time(12, 0, 0, 0))
            await context.bot.send_message(gv.ACCOUNTANT_GROUP_ID, 'üëå')
        else:
            await context.bot.send_message(gv.ACCOUNTANT_GROUP_ID, '–¢—ã –º–Ω–µ –Ω–µ –Ω—Ä–∞–≤–∏—à—å—Å—è')


async def command_pay_salaries(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if gv.ACCOUNTANT_GROUP_STATUS == gv.Status_PRESSING_BUTTON_TO_DECIDE_WHETHER_TO_PAY_SALARIES:
        gv.set_group_status('accountant', gv.Status_MAIN)
    GROUP_ID = gv.ACCOUNTANT_GROUP_ID
    if update.effective_chat.id != GROUP_ID:
        return
    if gv.ACCOUNTANT_GROUP_STATUS not in [gv.Status_MAIN, gv.Status_IN_SECTION_CLIENTS, gv.Status_IN_SECTION_CONTRACTS, gv.Status_IN_SECTION_PAYMENTS]:
        await context.bot.send_message(GROUP_ID, '–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∞–≤ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫')
        return

    msg = debt_display_handler.get_unpaid_shifts_message()
    if msg:
        msg = f'–û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è! –í–æ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç üëá\n\n' + msg
        await context.bot.send_message(gv.ACCOUNTANT_GROUP_ID, msg)
    else:
        await context.bot.send_message(GROUP_ID, '–ù–∏–∫–∞–∫–∏—Ö –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç!')
        return

    gv.CURRENT_OFFSET = 0
    gv.set_group_status('accountant', gv.Status_PRESSING_BUTTON_WHILE_PAYING_SALARIES)
    msg, gv.CURRENT_DEBT = debt_display_handler.get_next_payment_message()
    await context.bot.send_message(GROUP_ID, '–ù–∞—á–Ω–µ–º —Å –Ω–∞—á–∞–ª–∞ ‚¨áÔ∏è')
    await context.bot.send_message(GROUP_ID, msg, parse_mode='markdown', reply_markup=InlineKeyboardMarkup(gv.PAY_SALARIES_INLINE_KEYBOARD))


async def command_delete_sent_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    GROUP_ID = gv.ACCOUNTANT_GROUP_ID
    if update.effective_chat.id != GROUP_ID:
        return
    if gv.ACCOUNTANT_GROUP_STATUS not in [gv.Status_MAIN, gv.Status_IN_SECTION_CLIENTS, gv.Status_IN_SECTION_CONTRACTS, gv.Status_IN_SECTION_PAYMENTS]:
        await context.bot.send_message(GROUP_ID, '–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∞–≤ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫')
        return

    last_sent_messages = db.get_last_sent_messages()
    if last_sent_messages is None:
        await context.bot.send_message(GROUP_ID, '–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å—É—Ç–æ–∫ –º—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞–º. –°–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –µ—â–µ —Ä–∞–Ω—å—à–µ —É–∂–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å')
        return
    gv.set_group_status('accountant', gv.Status_PRESSING_CLIENT_TO_DELETE_LAST_MESSAGE)
    gv.CALLBACK_DATA.clear()
    buttons = []
    for i in range(len(last_sent_messages)):
        tg_id, message_id, name, surname, phone_number = last_sent_messages[i]
        buttons.append([InlineKeyboardButton(f'{name} {surname}, {prettify_phone_number(phone_number)}', callback_data=f'{tg_id},{message_id}')])
        gv.CALLBACK_DATA[f'{tg_id},{message_id}'] = f'{name} {surname}'
    buttons.append([InlineKeyboardButton("–ù–∏ —É –∫–æ–≥–æ –Ω–µ –Ω–∞–¥–æ", callback_data="–æ—Ç–º–µ–Ω–∞")])
    await context.bot.send_message(GROUP_ID, '–£ –∫–æ–≥–æ –∏–∑ –Ω–∏—Ö —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ?', reply_markup=InlineKeyboardMarkup(buttons))


async def command_check_last_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    GROUP_ID = gv.ACCOUNTANT_GROUP_ID
    if update.effective_chat.id != GROUP_ID:
        return

    last_message = db.get_last_sent_messages(latest_one=True)
    if last_message is None:
        await context.bot.send_message(GROUP_ID, '–ú—ã –ª–∏–±–æ –ø–æ–∫–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –Ω–∏—á–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞–º, –ª–∏–±–æ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–∏–ª–∏)')
        return
    tg_id, message_id, name, surname, phone_number, sending_datetime = last_message
    await context.bot.send_message(GROUP_ID, f'–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–ª–∏–µ–Ω—Ç—É –ø–æ –∏–º–µ–Ω–∏ {name} {surname}, {sending_datetime.strftime("%d.%m.%y –≤ %H:%M")}. –ü–µ—Ä–µ—Å—ã–ª–∞—é –µ–≥–æ —Å—é–¥–∞ ‚¨áÔ∏è')
    try:
        await context.bot.forward_message(GROUP_ID, tg_id, message_id)
    except Exception as e:
        logging.error(str(e))
        await context.bot.send_message(GROUP_ID, f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n{str(e)}')


async def command_get_shifts_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    GROUP_ID = gv.ACCOUNTANT_GROUP_ID
    if update.effective_chat.id != GROUP_ID:
        return

    shifts_data = db.get_all_shifts()
    if shifts_data is None:
        await context.bot.send_message(GROUP_ID, '–£ –Ω–∞—Å –ø–æ–∫–∞ –Ω–µ –±—ã–ª–æ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π)')
        return
    prettify_shifts_data(shifts_data)
    df = pd.DataFrame(shifts_data, columns=['–î–∞—Ç–∞', '–ò–º—è', '–¢–µ–ª–µ—Ñ–æ–Ω', '–ë–∞—Ä–∫–æ–¥', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–¢–∞—Ä–∏—Ñ', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–ê–∫—Ç', '–û–ø–ª–∞—á–µ–Ω–æ'])
    file_path = f'File/shifts_data.xlsx'
    df.to_excel(file_path, sheet_name='–°–º–µ–Ω—ã', index=False)
    prettify_excel_columns(file_path)
    await context.bot.send_document(GROUP_ID, file_path)
    os.remove(file_path)


async def command_clients(update: Update, context: ContextTypes.DEFAULT_TYPE):
    GROUP_ID = gv.ACCOUNTANT_GROUP_ID
    if update.effective_chat.id != GROUP_ID:
        return
    if gv.ACCOUNTANT_GROUP_STATUS not in [gv.Status_MAIN, gv.Status_IN_SECTION_CLIENTS, gv.Status_IN_SECTION_CONTRACTS, gv.Status_IN_SECTION_PAYMENTS]:
        await context.bot.send_message(GROUP_ID, '–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∞–≤ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫')
        return

    gv.set_group_status('accountant', gv.Status_IN_SECTION_CLIENTS)
    buttons = [[InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞', callback_data='add_business_direction')],
               [InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞', callback_data='add_client')],
               [InlineKeyboardButton('–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ', callback_data='get_clients_data')],
               [InlineKeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞', callback_data='edit_client')],
               [InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞', callback_data='delete_client')],
               [InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞', callback_data='delete_business_direction')],
               [InlineKeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞', callback_data='show_business_directions')]]
    await context.bot.send_message(GROUP_ID, '–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=InlineKeyboardMarkup(buttons))


async def command_contracts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    GROUP_ID = gv.ACCOUNTANT_GROUP_ID
    if update.effective_chat.id != GROUP_ID:
        return
    if gv.ACCOUNTANT_GROUP_STATUS not in [gv.Status_MAIN, gv.Status_IN_SECTION_CLIENTS, gv.Status_IN_SECTION_CONTRACTS,
                                          gv.Status_IN_SECTION_PAYMENTS]:
        await context.bot.send_message(GROUP_ID, '–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∞–≤ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫')
        return

    gv.set_group_status('accountant', gv.Status_IN_SECTION_CONTRACTS)
    buttons = [[InlineKeyboardButton('–°–∫–∏–Ω—É—Ç—å —à–∞–±–ª–æ–Ω –¥–æ–≥–æ–≤–æ—Ä–∞', callback_data='send_contract_template')],
               [InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä', callback_data='add_contract')],
               [InlineKeyboardButton('–°–ø–∏—Å–æ–∫ –¥–æ–≥–æ–≤–æ—Ä–æ–≤', callback_data='list_of_contracts')],
               [InlineKeyboardButton('–°–∫–∏–Ω—É—Ç—å –¥–æ–≥–æ–≤–æ—Ä', callback_data='send_contract')],
               [InlineKeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä', callback_data='edit_contract')],
               [InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å/–∑–∞–º–µ–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω –¥–æ–≥–æ–≤–æ—Ä–∞', callback_data='add_or_change_contract_template')],
               [InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω –¥–æ–≥–æ–≤–æ—Ä–∞', callback_data='delete_contract_template')]]
    await context.bot.send_message(GROUP_ID, '–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=InlineKeyboardMarkup(buttons))


async def command_payments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    GROUP_ID = gv.ACCOUNTANT_GROUP_ID
    if update.effective_chat.id != GROUP_ID:
        return
    if gv.ACCOUNTANT_GROUP_STATUS not in [gv.Status_MAIN, gv.Status_IN_SECTION_CLIENTS, gv.Status_IN_SECTION_CONTRACTS,
                                          gv.Status_IN_SECTION_PAYMENTS]:
        await context.bot.send_message(GROUP_ID, '–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∞–≤ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫')
        return

    gv.set_group_status('accountant', gv.Status_IN_SECTION_PAYMENTS)
    buttons = [[InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂', callback_data='add_paid_payment')],
               [InlineKeyboardButton('–ü–ª–∞–Ω–æ–≤—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è-–∑–∞–≤—Ç—Ä–∞', callback_data='scheduled_payments_for_today_tomorrow')],
               [InlineKeyboardButton('–ì—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π', callback_data='payment_schedule')],
               [InlineKeyboardButton('–°–ø–∏—Å–æ–∫ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π –∫–ª–∏–µ–Ω—Ç–æ–≤', callback_data='list_of_clients_debts')],
               [InlineKeyboardButton('–°–ø–∏—Å–æ–∫ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π', callback_data='list_of_actual_payments')]]
    await context.bot.send_message(GROUP_ID, '–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=InlineKeyboardMarkup(buttons))


def prettify_phone_number(phone_number: str) -> str:
    assert len(phone_number) >= 9
    phone_number = phone_number[:1] + ' (' + phone_number[1:4] + ') ' + phone_number[4:7] + '-' + phone_number[7:9] + '-' + phone_number[9:]
    return phone_number


def prettify_shifts_data(shifts_data: list):
    for line in shifts_data:
        line[0] = line[0].strftime("%d.%m.%Y")
        line[2] = prettify_phone_number(line[2])
        line[-1] = '–¥–∞' if line[-1] is True else '–Ω–µ—Ç'


def prettify_excel_columns(file_path: str):
    wb = xl.load_workbook(file_path)
    sheet = wb.active
    money_format = '_-* #,##0\\ "‚ÇΩ"_-;\\-* #,##0\\ "‚ÇΩ"_-;_-* "-"\\ "‚ÇΩ"_-;_-@_-'

    for i in range(2, sheet.max_row + 1):
        sheet.cell(i, 6).number_format = money_format  # –¢–∞—Ä–∏—Ñ

    for i in range(1, sheet.max_column + 1):
        sheet.cell(1, i).fill = GradientFill(stop=("E2EFDA", "E2EFDA"))

    wb.save(file_path)


async def error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.error(context.error)


def extract_status_change(chat_member_update: ChatMemberUpdated) -> Optional[Tuple[bool, bool]]:
    """Takes a ChatMemberUpdated instance and extracts whether the 'old_chat_member' was a member
    of the chat and whether the 'new_chat_member' is a member of the chat. Returns None, if
    the status didn't change.
    """
    status_change = chat_member_update.difference().get("status")
    old_is_member, new_is_member = chat_member_update.difference().get("is_member", (None, None))

    if status_change is None:
        return None

    old_status, new_status = status_change
    was_member = old_status in [
        ChatMember.MEMBER,
        ChatMember.OWNER,
        ChatMember.ADMINISTRATOR,
    ] or (old_status == ChatMember.RESTRICTED and old_is_member is True)
    is_member = new_status in [
        ChatMember.MEMBER,
        ChatMember.OWNER,
        ChatMember.ADMINISTRATOR,
    ] or (new_status == ChatMember.RESTRICTED and new_is_member is True)

    return was_member, is_member


async def track_chats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Tracks the chats the bot is in."""
    result = extract_status_change(update.my_chat_member)
    if result is None:
        return
    was_member, is_member = result

    cause = update.effective_user
    chat = update.effective_chat
    if chat.type in [Chat.GROUP, Chat.SUPERGROUP]:
        if not was_member and is_member:
            logging.info(f"{cause.full_name} ({cause.id}) added the bot to the group \"{chat.title}\"")
            if '–∞–¥–º–∏–Ω' in chat.title.lower():
                ADMIN_GROUP_ID = chat.id
                with open("admin_group_id.txt", "w") as f:
                    f.write(str(ADMIN_GROUP_ID))
                await context.bot.set_my_commands(commands=[], scope=BotCommandScopeChat(chat.id))
            elif '–±—É—Ö–≥–∞–ª—Ç–µ—Ä' in chat.title.lower():
                gv.set_group_status('accountant', gv.Status_MAIN)
                ACCOUNTANT_GROUP_ID = chat.id
                with open("accountant_group_id.txt", "w") as f:
                    f.write(str(ACCOUNTANT_GROUP_ID))
                await context.bot.set_my_commands(commands=bot_commands_accountant, scope=BotCommandScopeChat(chat.id))
            else:
                logging.warning('–í –Ω–∞–∑–≤–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã, –≤ –∫–æ—Ç–æ—Ä—É—é –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –±–æ—Ç, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ª–∏–±–æ —Å–ª–æ–≤–æ "–±—É—Ö–≥–∞–ª—Ç–µ—Ä", –ª–∏–±–æ —Å–ª–æ–≤–æ "–∞–¥–º–∏–Ω"')
            await context.bot.set_my_commands(commands=bot_commands_client, scope=BotCommandScopeAllPrivateChats())
        elif was_member and not is_member:
            logging.info(f"{cause.full_name} ({cause.id}) removed the bot from the group \"{chat.title}\"")


def run_bot():
    print('Starting bot...')
    defaults = Defaults(tzinfo=pytz.timezone('Europe/Moscow'))
    app = Application.builder().token(TOKEN).defaults(defaults).build()

    # Commands
    app.add_handler(CommandHandler('start', command_start))
    app.add_handler(CommandHandler('pay_salaries', command_pay_salaries))
    app.add_handler(CommandHandler('delete_sent_message', command_delete_sent_message))
    app.add_handler(CommandHandler('check_last_message', command_check_last_message))
    app.add_handler(CommandHandler('get_shifts_data', command_get_shifts_data))
    app.add_handler(CommandHandler('clients', command_clients))
    app.add_handler(CommandHandler('contracts', command_contracts))
    app.add_handler(CommandHandler('payments', command_payments))

    # Messages
    app.add_handler(MessageHandler(filters.TEXT, handle_message))

    # Files
    app.add_handler(MessageHandler(filters.ATTACHMENT, handle_file))

    # Callback buttons
    app.add_handler(CallbackQueryHandler(handle_callback))

    # Adding to group
    app.add_handler(ChatMemberHandler(track_chats, ChatMemberHandler.MY_CHAT_MEMBER))

    # Errors
    app.add_error_handler(error)

    # Pools the bot
    print('Polling...')
    app.run_polling(poll_interval=1)


if __name__ == '__main__':
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
    logging.basicConfig(
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        filename='info.log',
        filemode='w',
        level=logging.INFO
    )
    logging.getLogger("httpx").setLevel(logging.WARNING)

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ File –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—Å—ã–ª–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    if not os.path.exists("File"):
        os.mkdir("File")
    else:
        for fname in os.listdir("File"):
            os.remove(f"File/{fname}")

    if not os.path.exists("Contracts"):
        os.mkdir("Contracts")
    if not os.path.exists("Contract_templates"):
        os.mkdir("Contract_templates")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π
    debt_display_handler = DebtDisplayHandler(AggregationByPeople())

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = Database(db_dbname=db_dbname,
                  db_host=db_host,
                  db_user=db_user,
                  db_password=db_password)

    # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    gv = GlobalVars()

    clients = Clients(gv, db)
    contracts = Contracts(gv, db)
    payments = Payments(gv, db)

    bot_commands_accountant = [
        ('pay_salaries', '–°–∫–∏–Ω—É—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—ã'),
        ('delete_sent_message', '–£–¥–∞–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'),
        ('check_last_message', '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'),
        ('get_shifts_data', '–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö —Å–º–µ–Ω'),
        ('clients', '–ü–∏–¥–∞—Ä–∞—Å—ã —Å –¥–µ–Ω—å–≥–∞–º–∏'),
        ('contracts', '–î–æ–≥–æ–≤–æ—Ä—ã'),
        ('payments', '–ü–ª–∞—Ç–µ–∂–∏'),
    ]
    bot_commands_client = [
        ('start', '–£–∑–Ω–∞—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å')
    ]
    run_bot()
