import os
import pandas as pd
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import ContextTypes
from global_vars import GlobalVars
from database import Database


class Clients:
    def __init__(self, globalVars: GlobalVars, database: Database):
        self.gv = globalVars
        self.db = database
        self.EXPECTED_CLIENTS_DATA_FORMAT_TO_ADD = '\n'.join([
            '–§–∞–º–∏–ª–∏—è',
            '–ò–º—è',
            '–û—Ç—á–µ—Å—Ç–≤–æ',
            '–ü–æ–ª (–±—É–∫–≤–∞ "–º" –∏–ª–∏ "–∂")',
            'Telegram id (–∏–º–µ–Ω–Ω–æ —Ü–∏—Ñ–µ—Ä–∫–∏)',
            '–ò–ù–ù',
            '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
            '–ü–æ—á—Ç–∞',
        ])
        self.EXPECTED_CLIENTS_DATA_FORMAT_TO_EDIT = '\n'.join([
            '–§–∞–º–∏–ª–∏—è',
            '–ò–º—è',
            '–û—Ç—á–µ—Å—Ç–≤–æ',
            '–ü–æ–ª',
            '–ò–ù–ù',
            '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
            '–ü–æ—á—Ç–∞',
        ])

    async def add_business_direction(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        GROUP_ID = self.gv.ACCOUNTANT_GROUP_ID
        if update.effective_chat.id != GROUP_ID:
            return
        if self.gv.ACCOUNTANT_GROUP_STATUS != self.gv.Status_IN_SECTION_CLIENTS:
            await context.bot.send_message(GROUP_ID, '–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫')
            return

        self.gv.set_group_status('accountant', self.gv.Status_ENTERING_BUSINESS_DIRECTION)
        await context.bot.send_message(GROUP_ID, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–æ—Ç–º–µ–Ω–∞" –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ',
                                       reply_markup=ReplyKeyboardMarkup(self.gv.CANCEL_BUTTON))

    async def enter_business_direction(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        GROUP_ID = self.gv.ACCOUNTANT_GROUP_ID
        msg = update.message.text
        if self.db.business_direction_exists(msg):
            await context.bot.send_message(GROUP_ID, '–¢–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–∏–¥—É–º–∞–π —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ –∏–ª–∏ –Ω–∞–∂–º–∏ "–æ—Ç–º–µ–Ω–∞"')
        else:
            if msg.lower() == "–æ—Ç–º–µ–Ω–∞":
                await context.bot.send_message(GROUP_ID, '–û—Ç–º–µ–Ω–∞ —Ç–∞–∫ –æ—Ç–º–µ–Ω–∞', reply_markup=ReplyKeyboardRemove())
            else:
                self.db.add_business_direction(msg)
                await context.bot.send_message(GROUP_ID, '–î–æ–±–∞–≤–∏–ª üëå', reply_markup=ReplyKeyboardRemove())
            self.gv.set_group_status('accountant', self.gv.Status_IN_SECTION_CLIENTS)

    async def add_client(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        GROUP_ID = self.gv.ACCOUNTANT_GROUP_ID
        if update.effective_chat.id != GROUP_ID:
            return
        if self.gv.ACCOUNTANT_GROUP_STATUS != self.gv.Status_IN_SECTION_CLIENTS:
            await context.bot.send_message(GROUP_ID, '–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∞–≤ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫')
            return

        business_directions = self.db.get_business_directions('all')
        if business_directions is None:
            await context.bot.send_message(GROUP_ID, '–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ –∫–æ–≥–¥–∞ –Ω–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –±–∏–∑–Ω–µ—Å–∞')
            return
        self.gv.set_group_status('accountant', self.gv.Status_PRESSING_BUSINESS_DIRECTION_TO_ADD_NEW_CLIENT)
        self.gv.CALLBACK_DATA.clear()
        buttons = []
        for i in range(len(business_directions)):
            buttons.append([InlineKeyboardButton(business_directions[i], callback_data=f"btn_{i}")])
            self.gv.CALLBACK_DATA[f"btn_{i}"] = business_directions[i]
        buttons.append([InlineKeyboardButton("–æ—Ç–º–µ–Ω–∞", callback_data="–æ—Ç–º–µ–Ω–∞")])
        await context.bot.send_message(GROUP_ID, '–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞, –≤ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏ "–æ—Ç–º–µ–Ω–∞"',
                                       reply_markup=InlineKeyboardMarkup(buttons))

    async def enter_client_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        GROUP_ID = self.gv.ACCOUNTANT_GROUP_ID
        msg = update.message.text
        if msg.lower() == "–æ—Ç–º–µ–Ω–∞":
            await context.bot.send_message(GROUP_ID, "–î–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞", reply_markup=ReplyKeyboardRemove())
            self.gv.set_group_status('accountant', self.gv.Status_IN_SECTION_CLIENTS)
            return
        lines_entered = list(map(lambda x: x.strip(), msg.split('\n')))
        lines_entered = list(filter(lambda x: x != '', lines_entered))
        if len(lines_entered) != 8:
            ending = '–∞' if len(lines_entered) == 1 else '–æ'
            await context.bot.send_message(GROUP_ID, f'–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –û–∂–∏–¥–∞–ª–æ—Å—å 8 —Å—Ç—Ä–æ–∫, –±—ã–ª{ending} –ø–æ–ª—É—á–µ–Ω{ending}: {len(lines_entered)}')
            await context.bot.send_message(GROUP_ID, f'–ü–æ–≤—Ç–æ—Ä—è—é –¥–ª—è —Ç—É–ø—ã—Ö. –ù–∞–¥–æ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n{self.EXPECTED_CLIENTS_DATA_FORMAT_TO_ADD}\n\n–õ–∏–±–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–æ—Ç–º–µ–Ω–∞" –ø–æ–¥ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π')
            return
        surname, name, patronymic, sex, tg_id, inn, phone_number, email = lines_entered
        if sex[0].lower() == '–º':
            sex = 'male'
        elif sex[0].lower() == '–∂':
            sex = 'female'
        else:
            await context.bot.send_message(GROUP_ID, f'–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –£ –ø–æ–ª–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ 2 –∑–Ω–∞—á–µ–Ω–∏—è: "–º" –∏ "–∂". –ñ–¥—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–æ—Ç–º–µ–Ω–∞"')
            return
        if not tg_id.isdigit():
            if tg_id[0] == '-' and tg_id[1:].isdigit():
                await context.bot.send_message(GROUP_ID, f'–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π id. –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É')
            else:
                await context.bot.send_message(GROUP_ID, f'–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä. –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É')
            return
        if len(tg_id) > 18:
            await context.bot.send_message(GROUP_ID, f'–ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥–µ —Ä–µ–∞–ª—å–Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–∞–∫–æ–π –¥–ª–∏–Ω–Ω—ã–π id, –ø–µ—Ä–µ–¥–∞–π –º–æ–µ–º—É —Ä–∞–∑—Ä–∞–±—É, —á—Ç–æ –æ–Ω –¥–æ–ª–±–æ–µ–±. –ù–æ —Å–∫–æ—Ä–µ–π –≤—Å–µ–≥–æ —Ç–∞–∫–æ–≥–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å, —Ç–∞–∫ —á—Ç–æ —É—Ç–æ—á–Ω–∏ id –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–∞–∫–æ–≥–æ-–Ω–∏–±—É–¥—å –±–æ—Ç–∞ —Ç–∏–ø–∞ @get_any_telegram_id_bot –∏ –ø–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É)')
            return
        tg_id = int(tg_id)
        if len(inn) > 15:
            await context.bot.send_message(GROUP_ID, f'–î–ª–∏–Ω–∞ –ò–ù–ù –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 15. –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É')
            return
        for char in phone_number:
            if not char.isdigit():
                phone_number = phone_number.replace(char, '')
        if phone_number == '':
            await context.bot.send_message(GROUP_ID, f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ü–∏—Ñ—Ä, –µ—Å–ª–∏ —Ç—ã –Ω–µ –∑–Ω–∞–ª. –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É')
            return
        if len(phone_number) > 11:
            await context.bot.send_message(GROUP_ID, f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 11 —Ü–∏—Ñ—Ä. –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É')
            return
        if phone_number[0] == '7':
            phone_number = '8' + phone_number[1:]
        business_direction_id = self.db.get_business_direction_id(self.gv.CALLBACK_DATA['chosen_direction'])
        surname = surname.capitalize()
        name = name.capitalize()
        patronymic = patronymic.capitalize()
        inn = inn.strip()
        email = email.lower()
        assert len(surname) <= 30 and len(name) <= 30 and len(patronymic) <= 30 and len(email) <= 50
        if self.db.add_client(surname, name, patronymic, sex, tg_id, inn, business_direction_id, phone_number, email):
            self.gv.set_group_status('accountant', self.gv.Status_IN_SECTION_CLIENTS)
            await context.bot.send_message(GROUP_ID, f'–î–æ–±–∞–≤–∏–ª –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑—É {"üßë" if sex == "male" else "üë©"}', reply_markup=ReplyKeyboardRemove())
            try:
                await context.bot.send_message(tg_id, "–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥! –£ –º–µ–Ω—è —Ö–æ—Ä–æ—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏: —Ç–µ–±—è —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏ –≤ –±–∞–∑—É –∏ —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –æ–±–µ—â–∞–Ω–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É!")
            except:
                pass
        else:
            reply_msg = f'‚ùå –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å. –í –±–∞–∑–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∫–ª–∏–µ–Ω—Ç –ª–∏–±–æ —Å —Ç–∞–∫–∏–º –∂–µ id, –ª–∏–±–æ —Å —Ç–∞–∫–∏–º –∂–µ –ò–ù–ù, –ª–∏–±–æ —Å —Ç–∞–∫–∏–º –∂–µ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ª–∏–±–æ —Å —Ç–∞–∫–æ–π –∂–µ –ø–æ—á—Ç–æ–π'
            await context.bot.send_message(GROUP_ID, reply_msg, reply_markup=ReplyKeyboardRemove())

    async def get_clients_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        GROUP_ID = self.gv.ACCOUNTANT_GROUP_ID
        if update.effective_chat.id != GROUP_ID:
            return

        clients_data = self.db.get_clients_data()
        if clients_data is None:
            await context.bot.send_message(GROUP_ID, "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞")
            return
        df = pd.DataFrame(clients_data, columns=['–§–∞–º–∏–ª–∏—è', '–ò–º—è', '–û—Ç—á–µ—Å—Ç–≤–æ', '–ü–æ–ª', '–¢–µ–ª–µ–≥—Ä–∞–º id', '–ò–ù–ù', '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞', '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', '–ü–æ—á—Ç–∞'])
        df.loc[df['–ü–æ–ª'] == 'male', '–ü–æ–ª'] = '–º'
        df.loc[df['–ü–æ–ª'] == 'female', '–ü–æ–ª'] = '–∂'
        file_path = f'File/clients_data.xlsx'
        df.to_excel(file_path, sheet_name='–ö–ª–∏–µ–Ω—Ç—ã', index=False)
        await context.bot.send_document(GROUP_ID, file_path)
        os.remove(file_path)

    async def edit_client_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        GROUP_ID = self.gv.ACCOUNTANT_GROUP_ID
        if update.effective_chat.id != GROUP_ID:
            return
        if self.gv.ACCOUNTANT_GROUP_STATUS != self.gv.Status_IN_SECTION_CLIENTS:
            await context.bot.send_message(GROUP_ID, '–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∞–≤ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫')
            return

        business_directions = self.db.get_business_directions('all')
        if business_directions is None:
            await context.bot.send_message(GROUP_ID, '–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞')
            return
        self.gv.set_group_status('accountant', self.gv.Status_PRESSING_BUSINESS_DIRECTION_TO_EDIT_CLIENT)
        self.gv.CALLBACK_DATA.clear()
        buttons = []
        for i in range(len(business_directions)):
            buttons.append([InlineKeyboardButton(business_directions[i], callback_data=f"btn_{i}")])
            self.gv.CALLBACK_DATA[f"btn_{i}"] = business_directions[i]
        buttons.append([InlineKeyboardButton("–æ—Ç–º–µ–Ω–∞ ‚ùå", callback_data="–æ—Ç–º–µ–Ω–∞")])
        await context.bot.send_message(GROUP_ID, '–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞',
                                       reply_markup=InlineKeyboardMarkup(buttons))

    async def delete_client(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        GROUP_ID = self.gv.ACCOUNTANT_GROUP_ID
        if update.effective_chat.id != GROUP_ID:
            return
        if self.gv.ACCOUNTANT_GROUP_STATUS != self.gv.Status_IN_SECTION_CLIENTS:
            await context.bot.send_message(GROUP_ID, '–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∞–≤ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫')
            return

        if not self.db.clients_exist():
            await context.bot.send_message(GROUP_ID, "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞")
            return
        business_directions = self.db.get_business_directions('non-empty')
        assert len(business_directions) <= 100
        self.gv.set_group_status('accountant', self.gv.Status_PRESSING_BUSINESS_DIRECTION_TO_DELETE_CLIENT)
        self.gv.CALLBACK_DATA.clear()
        buttons = []
        for i in range(len(business_directions)):
            buttons.append([InlineKeyboardButton(business_directions[i], callback_data=f"btn_{i}")])
            self.gv.CALLBACK_DATA[f"btn_{i}"] = business_directions[i]
        buttons.append([InlineKeyboardButton("–æ—Ç–º–µ–Ω–∞", callback_data="–æ—Ç–º–µ–Ω–∞")])
        await context.bot.send_message(GROUP_ID, '–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫–ª–∏–µ–Ω—Ç, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –Ω–∞–∂–º–∏ "–æ—Ç–º–µ–Ω–∞"',
                                       reply_markup=InlineKeyboardMarkup(buttons))

    async def delete_business_direction(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        GROUP_ID = self.gv.ACCOUNTANT_GROUP_ID
        if update.effective_chat.id != GROUP_ID:
            return
        if self.gv.ACCOUNTANT_GROUP_STATUS != self.gv.Status_IN_SECTION_CLIENTS:
            await context.bot.send_message(GROUP_ID, '–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∞–≤ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫')
            return

        business_directions = self.db.get_business_directions('all')
        if business_directions is None:
            await context.bot.send_message(GROUP_ID, "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞")
            return
        assert len(business_directions) <= 100
        self.gv.set_group_status('accountant', self.gv.Status_PRESSING_BUSINESS_DIRECTION_TO_DELETE_ONE)
        self.gv.CALLBACK_DATA.clear()
        buttons = []
        for i in range(len(business_directions)):
            buttons.append([InlineKeyboardButton(business_directions[i], callback_data=f"btn_{i}")])
            self.gv.CALLBACK_DATA[f"btn_{i}"] = business_directions[i]
        buttons.append([InlineKeyboardButton("–æ—Ç–º–µ–Ω–∞", callback_data="–æ—Ç–º–µ–Ω–∞")])
        await context.bot.send_message(GROUP_ID, '–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –Ω–∞–∂–º–∏ "–æ—Ç–º–µ–Ω–∞"',
                                       reply_markup=InlineKeyboardMarkup(buttons))

    async def show_business_directions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        GROUP_ID = self.gv.ACCOUNTANT_GROUP_ID
        if update.effective_chat.id != GROUP_ID:
            return

        business_directions = self.db.get_business_directions('all')
        if business_directions is None:
            await context.bot.send_message(GROUP_ID, "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞")
            return
        reply_msg = '–¢–µ–∫—É—â–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞:\n'
        for i in range(len(business_directions)):
            reply_msg += f"\n{i + 1}) {business_directions[i]}"
        await context.bot.send_message(GROUP_ID, reply_msg)

    def check_entered_client_data_and_update(self, message: str, client_id: int):
        lines_entered = list(map(lambda x: x.strip(), message.split('\n')))
        lines_entered = list(filter(lambda x: x != '', lines_entered))
        if len(lines_entered) != 7:
            ending = '–∞' if len(lines_entered) == 1 else '–æ'
            answer = f'–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –û–∂–∏–¥–∞–ª–æ—Å—å 7 —Å—Ç—Ä–æ–∫, –±—ã–ª{ending} –ø–æ–ª—É—á–µ–Ω{ending}: {len(lines_entered)}. '
            answer += f'–í–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n{self.EXPECTED_CLIENTS_DATA_FORMAT_TO_EDIT}\n\n–∏–ª–∏ –Ω–∞–∂–º–∏ "–æ—Ç–º–µ–Ω–∞"'
            return answer
        surname, name, patronymic, sex, inn, phone_number, email = lines_entered
        if surname.startswith('–§–∞–º–∏–ª–∏—è: '):
            surname = surname[surname.find(' ') + 1:]
        if name.startswith('–ò–º—è: '):
            name = name[name.find(' ') + 1:]
        if patronymic.startswith('–û—Ç—á–µ—Å—Ç–≤–æ: '):
            patronymic = patronymic[patronymic.find(' ') + 1:]
        if sex.startswith('–ü–æ–ª: '):
            sex = sex[sex.find(' ') + 1:]
        if inn.startswith('–ò–ù–ù: '):
            inn = inn[inn.find(' ') + 1:]
        if phone_number.startswith('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: '):
            phone_number = phone_number[16:]
        if email.startswith('–ü–æ—á—Ç–∞: '):
            email = email[email.find(' ') + 1:]

        if sex[0].lower() == '–º':
            sex = 'male'
        elif sex[0].lower() == '–∂':
            sex = 'female'
        else:
            return f'–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –£ –ø–æ–ª–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ 2 –∑–Ω–∞—á–µ–Ω–∏—è: "–º" –∏ "–∂". –ñ–¥—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–æ—Ç–º–µ–Ω–∞"'
        if len(inn) > 15:
            return f'–î–ª–∏–Ω–∞ –ò–ù–ù –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 15. –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É'
        for char in phone_number:
            if not char.isdigit():
                phone_number = phone_number.replace(char, '')
        if phone_number == '':
            return f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ü–∏—Ñ—Ä, –µ—Å–ª–∏ —Ç—ã –Ω–µ –∑–Ω–∞–ª. –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É'
        if len(phone_number) > 11:
            return f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 11 —Ü–∏—Ñ—Ä. –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É'
        if phone_number[0] == '7':
            phone_number = '8' + phone_number[1:]
        surname = surname.capitalize()
        name = name.capitalize()
        patronymic = patronymic.capitalize()
        inn = inn.strip()
        email = email.lower()
        assert len(surname) <= 30 and len(name) <= 30 and len(patronymic) <= 30 and len(email) <= 50
        return self.db.update_client(client_id, surname, name, patronymic, sex, inn, phone_number, email)