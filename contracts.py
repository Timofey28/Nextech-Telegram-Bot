import logging
import os
from datetime import datetime, date
import re
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import ContextTypes
from global_vars import GlobalVars
from database import Database


class Contracts:
    def __init__(self, globalVars: GlobalVars, database: Database):
        self.gv = globalVars
        self.db = database
        self.CONTRACT_EDITING_OPTIONS = [[InlineKeyboardButton('–î–∞—Ç—ã –∏ —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–µ–π', callback_data='payment_schedule')],
                                         [InlineKeyboardButton('–ó–∞–º–µ–Ω–∏—Ç—å —Å–∞–º –¥–æ–∫—É–º–µ–Ω—Ç', callback_data='change_document_itself')],
                                         [InlineKeyboardButton('–ó–∞–∫—Ä—ã—Ç—å –¥–æ–≥–æ–≤–æ—Ä', callback_data='close_contract')],
                                         [InlineKeyboardButton('–Ω–∏—á–µ–≥–æ ‚ùå', callback_data='–æ—Ç–º–µ–Ω–∞')]]

    async def send_contract_template(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        GROUP_ID = self.gv.ACCOUNTANT_GROUP_ID
        if update.effective_chat.id != GROUP_ID:
            return
        if self.gv.ACCOUNTANT_GROUP_STATUS != self.gv.Status_IN_SECTION_CONTRACTS:
            await context.bot.send_message(GROUP_ID, '–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∞–≤ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫')
            return

        template_names = os.listdir(self.gv.PATH_CONCTRACT_TEMPLATES)
        if not template_names:
            await context.bot.send_message(self.gv.ACCOUNTANT_GROUP_ID, '–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø–æ–∫–∞ –Ω–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤ –¥–æ–≥–æ–≤–æ—Ä–æ–≤')
            return
        self.gv.set_group_status('accountant', self.gv.Status_PRESSING_CONTRACT_TEMPLATE_TO_SEND_ONE)
        buttons = []
        counter = 1
        for template_name in template_names:
            buttons.append([InlineKeyboardButton(template_name[:template_name.rfind('.')], callback_data=f'{counter}')])
            self.gv.CALLBACK_DATA[f'{counter}'] = template_name
            counter += 1
        buttons.append([InlineKeyboardButton('–Ω–∏–∫–∞–∫–æ–π, —É–∂–µ –Ω–µ –Ω–∞–¥–æ ‚ùå', callback_data='–æ—Ç–º–µ–Ω–∞')])
        await context.bot.send_message(GROUP_ID, '–ö–∞–∫–æ–π –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤ —Å–∫–∏–Ω—É—Ç—å?', reply_markup=InlineKeyboardMarkup(buttons))

    async def add_contract(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        GROUP_ID = self.gv.ACCOUNTANT_GROUP_ID
        if update.effective_chat.id != GROUP_ID:
            return
        if self.gv.ACCOUNTANT_GROUP_STATUS != self.gv.Status_IN_SECTION_CONTRACTS:
            await context.bot.send_message(GROUP_ID, '–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∞–≤ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫')
            return

        business_directions = self.db.get_business_directions('all')
        if business_directions is None:
            await context.bot.send_message(GROUP_ID, '–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä –µ—Å–ª–∏ –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤')
            return
        self.gv.set_group_status('accountant', self.gv.Status_PRESSING_BUSINESS_DIRECTION_TO_ADD_NEW_CONTRACT)
        self.gv.CALLBACK_DATA.clear()
        buttons = []
        for i in range(len(business_directions)):
            buttons.append([InlineKeyboardButton(business_directions[i], callback_data=f"btn_{i}")])
            self.gv.CALLBACK_DATA[f"btn_{i}"] = business_directions[i]
        buttons.append([InlineKeyboardButton("–æ—Ç–º–µ–Ω–∞", callback_data="–æ—Ç–º–µ–Ω–∞")])
        await context.bot.send_message(GROUP_ID, '–ö–ª–∏–µ–Ω—Ç—É –∏–∑ –∫–∞–∫–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä?',
                                       reply_markup=InlineKeyboardMarkup(buttons))

    async def enter_contract_data_stage_1(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        GROUP_ID = self.gv.ACCOUNTANT_GROUP_ID
        msg = update.message.text
        if msg.lower() == "–æ—Ç–º–µ–Ω–∞":
            await context.bot.send_message(GROUP_ID, 'üÜó', reply_markup=ReplyKeyboardRemove())
            self.gv.set_group_status('accountant', self.gv.Status_IN_SECTION_CONTRACTS)
            return
        lines_entered = list(map(lambda x: x.strip(), msg.split('\n')))
        lines_entered = list(filter(lambda x: x != '', lines_entered))
        if len(lines_entered) != 3:
            ending = '–∞' if len(lines_entered) == 1 else '–æ'
            ans = f'–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –û–∂–∏–¥–∞–ª–æ—Å—å 3 —Å—Ç—Ä–æ–∫–∏, –±—ã–ª{ending} –ø–æ–ª—É—á–µ–Ω{ending}: {len(lines_entered)}. '
            ans += '–í–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ\n\n1) –ö–æ–º–ø–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞\n2) –î–∞—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–¥–¥.–º–º.–≥–≥"'
            ans += '\n3) –ü–æ–ª–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ (–ª–∏–±–æ –µ–∂–µ–º–µ—Å—è—á–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞, –µ—Å–ª–∏ –¥–æ–≥–æ–≤–æ—Ä —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π)'
            ans += '\n\n–ª–∏–±–æ –Ω–∞–∂–º–∏ "–æ—Ç–º–µ–Ω–∞"'
            await context.bot.send_message(GROUP_ID, ans)
            return
        company_name = lines_entered[0]
        if len(company_name) > 100:
            await context.bot.send_message(GROUP_ID, '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏. –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É')
            return
        try:
            date_of_conclusion = datetime.strptime(lines_entered[1], "%d.%m.%y").date()
        except ValueError:
            ans = '–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å—á–∏—Ç–∞—Ç—å –¥–∞—Ç—É –∑–∞–∫–ª—é—á–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞. '
            s = lines_entered[1]
            if len(s) == 8 and s[:2].isdigit() and s[3:5].isdigit() and s[6:].isdigit() and s[2] == s[5] == '.':
                ans += '–û–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å. '
            else:
                ans += '–û–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–¥–¥.–º–º.–≥–≥". '
            ans += '–ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –Ω–∞–∂–º–∏ "–æ—Ç–º–µ–Ω–∞"'
            await context.bot.send_message(GROUP_ID, ans)
            return
        try:
            amount = int(lines_entered[2])
        except:
            ans = '–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å—á–∏—Ç–∞—Ç—å –ø–æ–ª–Ω—É—é —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤. '
            ans += '–ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –Ω–∞–∂–º–∏ "–æ—Ç–º–µ–Ω–∞"'
            await context.bot.send_message(GROUP_ID, ans)
            return
        self.gv.CALLBACK_DATA['client_company'] = company_name
        self.gv.CALLBACK_DATA['date_of_conclusion'] = date_of_conclusion
        self.gv.CALLBACK_DATA['full_payment_amount'] = amount
        self.gv.set_group_status('accountant', self.gv.Status_ENTERING_CONTRACT_INFO_STAGE_2)
        msg = '–≠—Ç–∞–ø 2Ô∏è‚É£. –°–∫–∏–Ω—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä. –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥–æ–±–Ω–æ —Å–ª–µ–¥—É—é—â–µ–º—É: "–î–æ–≥–æ–≤–æ—Ä –ê1 –æ—Ç 03.04.2024–≥."'
        await context.bot.send_message(GROUP_ID, msg)

    async def enter_contract_data_stage_3(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        GROUP_ID = self.gv.ACCOUNTANT_GROUP_ID
        date_of_conclusion = self.gv.CALLBACK_DATA['date_of_conclusion']
        msg = update.message.text
        if msg.lower() == "–æ—Ç–º–µ–Ω–∞":
            os.remove(self.gv.CURRENT_FILE)
            self.gv.set_group_status('accountant', self.gv.Status_IN_SECTION_CONTRACTS)
            await context.bot.send_message(GROUP_ID, 'üÜó', reply_markup=ReplyKeyboardRemove())
            return
        error_msg = '–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n'
        if self.gv.CALLBACK_DATA['contract_type'] == 'regular':
            error_msg += '–ß–∏—Å–ª–æ –º–µ—Å—è—Ü–∞ –æ—Ç 1 –¥–æ 28 - —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞'
        else:
            error_msg += '–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–¥–¥.–º–º.–≥–≥" - —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞'
        error_msg += '\n\n–°—Ç—Ä–æ–≥–æ –ø–æ –æ–¥–Ω–æ–º—É –ø–ª–∞—Ç–µ–∂—É –≤ —Å—Ç—Ä–æ–∫–µ. –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –Ω–∞–∂–º–∏ "–æ—Ç–º–µ–Ω–∞"'

        lines_entered = list(map(lambda x: x.strip(), msg.split('\n')))
        lines_entered = list(filter(lambda x: x != '', lines_entered))
        scheduled_payments: list[[date, int]] = []
        full_payment_amount = 0
        for line in lines_entered:
            if line.count('-') != 1:
                await context.bot.send_message(GROUP_ID, error_msg)
                return
            day = line[:line.find('-')].strip()
            payment_amount = line[line.find('-') + 1:].strip()
            try:
                if self.gv.CALLBACK_DATA['contract_type'] == 'regular':
                    day = int(day)
                    if not 1 <= day <= 28:
                        raise ValueError
                    day = date(date.today().year, date.today().month, day)
                else:
                    day = datetime.strptime(day, "%d.%m.%y").date()
                    if day < date_of_conclusion:
                        msg = f'–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞ ({day.strftime("%d.%m.%y")}) –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –∑–∞–∫–ª—é—á–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞'
                        msg += f' ({date_of_conclusion.strftime("%d.%m.%y")}). –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –Ω–∞–∂–º–∏ "–æ—Ç–º–µ–Ω–∞"'
                        await context.bot.send_message(GROUP_ID, msg)
                        return
                payment_amount = int(payment_amount)
            except ValueError:
                await context.bot.send_message(GROUP_ID, error_msg)
                return
            scheduled_payments.append([day, payment_amount])
            full_payment_amount += payment_amount
        if full_payment_amount != self.gv.CALLBACK_DATA['full_payment_amount']:
            ans = f"–ü–æ–ª–Ω—ã–µ —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç\n\n–û–∂–∏–¥–∞–ª–æ—Å—å: {self.gv.CALLBACK_DATA['full_payment_amount']:,} ‚ÇΩ"
            ans += f'\n–ë—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ: {full_payment_amount:,} ‚ÇΩ'
            ans += '\n\n–ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –Ω–∞–∂–º–∏ "–æ—Ç–º–µ–Ω–∞"'
            await context.bot.send_message(GROUP_ID, ans)
            return

        self.gv.set_group_status('accountant', self.gv.Status_IN_SECTION_CONTRACTS)
        os.replace(self.gv.CURRENT_FILE, f"{self.gv.PATH_CONTRACTS}/{self.gv.CALLBACK_DATA['file_name']}")
        contract_id = self.db.add_contract(self.gv.CALLBACK_DATA['file_name'],
                                           self.gv.CALLBACK_DATA['contract_code'],
                                           self.gv.CALLBACK_DATA['contract_type'],
                                           self.gv.CALLBACK_DATA['client_id'],
                                           self.gv.CALLBACK_DATA['client_company'],
                                           self.gv.CALLBACK_DATA['date_of_conclusion'])
        self.db.add_payment_dates_and_amounts(contract_id, scheduled_payments)
        await context.bot.send_message(GROUP_ID, '–î–æ–≥–æ–≤–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ', reply_markup=ReplyKeyboardRemove())

    async def edit_contract(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        GROUP_ID = self.gv.ACCOUNTANT_GROUP_ID
        if update.effective_chat.id != GROUP_ID:
            return
        if self.gv.ACCOUNTANT_GROUP_STATUS != self.gv.Status_IN_SECTION_CONTRACTS:
            await context.bot.send_message(GROUP_ID, '–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∞–≤ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫')
            return

        business_directions = self.db.get_business_directions_containing_active_contracts()
        if business_directions is None:
            await context.bot.send_message(GROUP_ID, '–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞')
            return
        self.gv.set_group_status('accountant', self.gv.Status_PRESSING_BUSINESS_DIRECTION_TO_EDIT_CONTRACT)
        self.gv.CALLBACK_DATA.clear()
        buttons = []
        for i in range(len(business_directions)):
            buttons.append([InlineKeyboardButton(business_directions[i], callback_data=f"btn_{i}")])
            self.gv.CALLBACK_DATA[f"btn_{i}"] = business_directions[i]
        buttons.append([InlineKeyboardButton("–æ—Ç–º–µ–Ω–∞", callback_data="–æ—Ç–º–µ–Ω–∞")])
        await context.bot.send_message(GROUP_ID, '–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞ —á–µ–ª–æ–≤–µ–∫–∞, –¥–æ–≥–æ–≤–æ—Ä —Å –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
                                       reply_markup=InlineKeyboardMarkup(buttons))

    async def edit_contract_payment_schedule(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        GROUP_ID = self.gv.ACCOUNTANT_GROUP_ID
        contract_id = self.gv.CALLBACK_DATA['contract_id']
        contract_name = self.gv.CALLBACK_DATA['contract_file_name']
        contract_name = contract_name[:contract_name.rfind('.')]
        contract_type = self.gv.CALLBACK_DATA['contract_type']
        current_payment_info = self.db.get_scheduled_payment_dates_and_amounts(contract_id)
        if current_payment_info is None:
            logging.error("contract can't have no scheduled payment info (dates and amounts)")
            exit(0)
        self.gv.set_group_status('accountant', self.gv.Status_ENTERING_UPDATED_CONTRACT_PAYMENT_SCHEDULE)
        msg = f'–¢–µ–∫—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π –¥–æ–≥–æ–≤–æ—Ä–∞ "{contract_name}":\n'
        full_payment_amount = 0
        for dat, amount in current_payment_info:
            full_payment_amount += amount
            if contract_type == 'regular':
                msg += f'\n{dat.day} - {amount:,} ‚ÇΩ'
            else:
                msg += f'\n{dat.strftime("%d.%m.%y")} - {amount:,} ‚ÇΩ'
        self.gv.CALLBACK_DATA['full_payment_amount'] = full_payment_amount
        msg += f'\n\n–°—É–º–º–∞—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂: {full_payment_amount:,} ‚ÇΩ'
        if contract_type == 'regular':
            msg += '/–º–µ—Å.'
        await context.bot.send_message(GROUP_ID, msg)
        msg = '–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n'
        if contract_type == 'regular':
            msg += '–ß–∏—Å–ª–æ –º–µ—Å—è—Ü–∞ –æ—Ç 1 –¥–æ 28 - —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞'
        else:
            msg += '–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–¥–¥.–º–º.–≥–≥" - —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞'
        await context.bot.send_message(GROUP_ID, msg, reply_markup=ReplyKeyboardMarkup(self.gv.CANCEL_BUTTON))

    async def enter_updated_contract_payment_schedule(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        GROUP_ID = self.gv.ACCOUNTANT_GROUP_ID
        msg = update.message.text
        if msg == "–æ—Ç–º–µ–Ω–∞":
            self.gv.set_group_status('accountant', self.gv.Status_IN_SECTION_CONTRACTS)
            await context.bot.send_message(GROUP_ID, 'üÜó', reply_markup=ReplyKeyboardRemove())
        else:
            error_msg = '–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n'
            if self.gv.CALLBACK_DATA['contract_type'] == 'regular':
                error_msg += '–ß–∏—Å–ª–æ –º–µ—Å—è—Ü–∞ –æ—Ç 1 –¥–æ 28 - —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞'
            else:
                error_msg += '–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–¥–¥.–º–º.–≥–≥" - —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞'
            error_msg += '\n\n–°—Ç—Ä–æ–≥–æ –ø–æ –æ–¥–Ω–æ–º—É –ø–ª–∞—Ç–µ–∂—É –≤ —Å—Ç—Ä–æ–∫–µ. –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –Ω–∞–∂–º–∏ "–æ—Ç–º–µ–Ω–∞"'

            lines_entered = list(map(lambda x: x.strip(), msg.split('\n')))
            lines_entered = list(filter(lambda x: x != '', lines_entered))
            scheduled_payments: list[[date, int]] = []
            full_payment_amount = 0
            for line in lines_entered:
                if line.count('-') != 1:
                    await context.bot.send_message(GROUP_ID, error_msg)
                    return
                day = line[:line.find('-')].strip()
                payment_amount = line[line.find('-') + 1:].strip()
                try:
                    if self.gv.CALLBACK_DATA['contract_type'] == 'regular':
                        day = int(day)
                        if not 1 <= day <= 28:
                            raise ValueError
                        day = date(date.today().year, date.today().month, day)
                    else:
                        day = datetime.strptime(day, "%d.%m.%y").date()
                    payment_amount = int(payment_amount)
                except ValueError:
                    await context.bot.send_message(GROUP_ID, error_msg)
                    return
                scheduled_payments.append([day, payment_amount])
                full_payment_amount += payment_amount
            if full_payment_amount != self.gv.CALLBACK_DATA['full_payment_amount']:
                ans = f"–ü–æ–ª–Ω—ã–µ —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç\n\n–û–∂–∏–¥–∞–ª–æ—Å—å: {self.gv.CALLBACK_DATA['full_payment_amount']:,} ‚ÇΩ"
                ans += f'\n–ë—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ: {full_payment_amount:,} ‚ÇΩ'
                ans += '\n\n–ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –Ω–∞–∂–º–∏ "–æ—Ç–º–µ–Ω–∞"'
                await context.bot.send_message(GROUP_ID, ans)
                return

            self.gv.set_group_status('accountant', self.gv.Status_IN_SECTION_CONTRACTS)
            self.db.update_payment_dates_and_amounts(self.gv.CALLBACK_DATA['contract_id'], scheduled_payments)
            await context.bot.send_message(GROUP_ID, '–ì—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω ‚úÖ', reply_markup=ReplyKeyboardRemove())

    async def list_of_contracts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        active_contracts, closed_contracts = self.db.get_contracts_list()
        if active_contracts is None and closed_contracts is None:
            await context.bot.send_message(self.gv.ACCOUNTANT_GROUP_ID, '–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–≥–æ–≤–æ—Ä–æ–≤')
            return
        msg = ''
        if active_contracts:
            counter = 1
            msg = '–î–µ–π—Å—Ç–≤—É—é—â–∏–µ –¥–æ–≥–æ–≤–æ—Ä—ã:\n'
            for contract in active_contracts:
                contract_name = contract[2][:contract[2].rfind('.')]
                msg += f'\n{counter}) {contract[0]} {contract[1]} ü§ù {contract_name}'
                counter += 1
        if closed_contracts:
            counter = 1
            if msg:
                msg += '\n\n'
            msg += '–ó–∞–∫—Ä—ã—Ç—ã–µ –¥–æ–≥–æ–≤–æ—Ä—ã:\n'
            for contract in closed_contracts:
                contract_name = contract[2][:contract[2].rfind('.')]
                msg += f'\n{counter}) {contract[0]} {contract[1]} ü§ùüèª {contract_name}'
                counter += 1
        await context.bot.send_message(self.gv.ACCOUNTANT_GROUP_ID, msg)

    async def send_contract(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        GROUP_ID = self.gv.ACCOUNTANT_GROUP_ID
        if update.effective_chat.id != GROUP_ID:
            return
        if self.gv.ACCOUNTANT_GROUP_STATUS != self.gv.Status_IN_SECTION_CONTRACTS:
            await context.bot.send_message(GROUP_ID, '–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∞–≤ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫')
            return

        business_directions = self.db.get_business_directions_containing_active_contracts()
        if business_directions is None:
            await context.bot.send_message(GROUP_ID, '–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–≥–æ–≤–æ—Ä–æ–≤')
            return
        self.gv.set_group_status('accountant', self.gv.Status_PRESSING_BUSINESS_DIRECTION_TO_SEND_CONTRACT)
        self.gv.CALLBACK_DATA.clear()
        buttons = []
        for i in range(len(business_directions)):
            buttons.append([InlineKeyboardButton(business_directions[i], callback_data=f"btn_{i}")])
            self.gv.CALLBACK_DATA[f"btn_{i}"] = business_directions[i]
        buttons.append([InlineKeyboardButton("–æ—Ç–º–µ–Ω–∞", callback_data="–æ—Ç–º–µ–Ω–∞")])
        await context.bot.send_message(GROUP_ID, '–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞ —á–µ–ª–æ–≤–µ–∫–∞, –¥–æ–≥–æ–≤–æ—Ä —Å –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ —Å–∫–∏–Ω—É—Ç—å',
                                       reply_markup=InlineKeyboardMarkup(buttons))

    async def add_or_change_contract_template(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        GROUP_ID = self.gv.ACCOUNTANT_GROUP_ID
        if update.effective_chat.id != GROUP_ID:
            return
        if self.gv.ACCOUNTANT_GROUP_STATUS != self.gv.Status_IN_SECTION_CONTRACTS:
            await context.bot.send_message(GROUP_ID, '–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∞–≤ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫')
            return

        self.gv.set_group_status('accountant', self.gv.Status_SENDING_NEW_CONTRACT_TEMPLATE)
        await context.bot.send_message(GROUP_ID, '–°–∫–∏–Ω—å –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω –¥–æ–≥–æ–≤–æ—Ä–∞ –∏–ª–∏ –Ω–∞–∂–º–∏ "–æ—Ç–º–µ–Ω–∞"', reply_markup=ReplyKeyboardMarkup(self.gv.CANCEL_BUTTON))

    async def delete_contract_template(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        GROUP_ID = self.gv.ACCOUNTANT_GROUP_ID
        if update.effective_chat.id != GROUP_ID:
            return
        if self.gv.ACCOUNTANT_GROUP_STATUS != self.gv.Status_IN_SECTION_CONTRACTS:
            await context.bot.send_message(GROUP_ID, '–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∞–≤ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫')
            return

        template_names = os.listdir(self.gv.PATH_CONCTRACT_TEMPLATES)
        if not template_names:
            await context.bot.send_message(self.gv.ACCOUNTANT_GROUP_ID, '–£–¥–∞–ª—è—Ç—å –ø–æ–∫–∞ –Ω–µ—á–µ–≥–æ)')
            return
        self.gv.set_group_status('accountant', self.gv.Status_PRESSING_CONTRACT_TEMPLATE_TO_DELETE_ONE)
        buttons = []
        counter = 1
        for template_name in template_names:
            buttons.append([InlineKeyboardButton(template_name[:template_name.rfind('.')], callback_data=f'{counter}')])
            self.gv.CALLBACK_DATA[f'{counter}'] = template_name
            counter += 1
        buttons.append([InlineKeyboardButton('–ù–ò–ù–ê–î–ê', callback_data='–æ—Ç–º–µ–Ω–∞')])
        await context.bot.send_message(GROUP_ID, '–ö–∞–∫–æ–π –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤ —É–¥–∞–ª–∏—Ç—å?', reply_markup=InlineKeyboardMarkup(buttons))

    @staticmethod
    def contract_name_has_english_letters(contract_name: str):
        return re.search('[a-zA-Z]', contract_name) is not None